
stm32l476-isl29033.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056fc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005888  08005888  00015888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005918  08005918  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005918  08005918  00015918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005920  08005920  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005920  08005920  00015920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000074  0800599c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  0800599c  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da7e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ba7  00000000  00000000  0002db22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  0002f6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  00030288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025f01  00000000  00000000  00030d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009729  00000000  00000000  00056c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9927  00000000  00000000  00060382  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00149ca9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003414  00000000  00000000  00149d24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800586c 	.word	0x0800586c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	0800586c 	.word	0x0800586c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000af4:	f000 b972 	b.w	8000ddc <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9e08      	ldr	r6, [sp, #32]
 8000b16:	4604      	mov	r4, r0
 8000b18:	4688      	mov	r8, r1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d14b      	bne.n	8000bb6 <__udivmoddi4+0xa6>
 8000b1e:	428a      	cmp	r2, r1
 8000b20:	4615      	mov	r5, r2
 8000b22:	d967      	bls.n	8000bf4 <__udivmoddi4+0xe4>
 8000b24:	fab2 f282 	clz	r2, r2
 8000b28:	b14a      	cbz	r2, 8000b3e <__udivmoddi4+0x2e>
 8000b2a:	f1c2 0720 	rsb	r7, r2, #32
 8000b2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b32:	fa20 f707 	lsr.w	r7, r0, r7
 8000b36:	4095      	lsls	r5, r2
 8000b38:	ea47 0803 	orr.w	r8, r7, r3
 8000b3c:	4094      	lsls	r4, r2
 8000b3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b42:	0c23      	lsrs	r3, r4, #16
 8000b44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b48:	fa1f fc85 	uxth.w	ip, r5
 8000b4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b54:	fb07 f10c 	mul.w	r1, r7, ip
 8000b58:	4299      	cmp	r1, r3
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x60>
 8000b5c:	18eb      	adds	r3, r5, r3
 8000b5e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b62:	f080 811b 	bcs.w	8000d9c <__udivmoddi4+0x28c>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 8118 	bls.w	8000d9c <__udivmoddi4+0x28c>
 8000b6c:	3f02      	subs	r7, #2
 8000b6e:	442b      	add	r3, r5
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b84:	45a4      	cmp	ip, r4
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x8c>
 8000b88:	192c      	adds	r4, r5, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b8e:	f080 8107 	bcs.w	8000da0 <__udivmoddi4+0x290>
 8000b92:	45a4      	cmp	ip, r4
 8000b94:	f240 8104 	bls.w	8000da0 <__udivmoddi4+0x290>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	442c      	add	r4, r5
 8000b9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ba0:	eba4 040c 	sub.w	r4, r4, ip
 8000ba4:	2700      	movs	r7, #0
 8000ba6:	b11e      	cbz	r6, 8000bb0 <__udivmoddi4+0xa0>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c6 4300 	strd	r4, r3, [r6]
 8000bb0:	4639      	mov	r1, r7
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0xbe>
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	f000 80eb 	beq.w	8000d96 <__udivmoddi4+0x286>
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bc6:	4638      	mov	r0, r7
 8000bc8:	4639      	mov	r1, r7
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	fab3 f783 	clz	r7, r3
 8000bd2:	2f00      	cmp	r7, #0
 8000bd4:	d147      	bne.n	8000c66 <__udivmoddi4+0x156>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d302      	bcc.n	8000be0 <__udivmoddi4+0xd0>
 8000bda:	4282      	cmp	r2, r0
 8000bdc:	f200 80fa 	bhi.w	8000dd4 <__udivmoddi4+0x2c4>
 8000be0:	1a84      	subs	r4, r0, r2
 8000be2:	eb61 0303 	sbc.w	r3, r1, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	4698      	mov	r8, r3
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	d0e0      	beq.n	8000bb0 <__udivmoddi4+0xa0>
 8000bee:	e9c6 4800 	strd	r4, r8, [r6]
 8000bf2:	e7dd      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000bf4:	b902      	cbnz	r2, 8000bf8 <__udivmoddi4+0xe8>
 8000bf6:	deff      	udf	#255	; 0xff
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	f040 808f 	bne.w	8000d20 <__udivmoddi4+0x210>
 8000c02:	1b49      	subs	r1, r1, r5
 8000c04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c08:	fa1f f885 	uxth.w	r8, r5
 8000c0c:	2701      	movs	r7, #1
 8000c0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c12:	0c23      	lsrs	r3, r4, #16
 8000c14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d907      	bls.n	8000c34 <__udivmoddi4+0x124>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x122>
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	f200 80cd 	bhi.w	8000dcc <__udivmoddi4+0x2bc>
 8000c32:	4684      	mov	ip, r0
 8000c34:	1a59      	subs	r1, r3, r1
 8000c36:	b2a3      	uxth	r3, r4
 8000c38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c44:	fb08 f800 	mul.w	r8, r8, r0
 8000c48:	45a0      	cmp	r8, r4
 8000c4a:	d907      	bls.n	8000c5c <__udivmoddi4+0x14c>
 8000c4c:	192c      	adds	r4, r5, r4
 8000c4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c52:	d202      	bcs.n	8000c5a <__udivmoddi4+0x14a>
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	f200 80b6 	bhi.w	8000dc6 <__udivmoddi4+0x2b6>
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	eba4 0408 	sub.w	r4, r4, r8
 8000c60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c64:	e79f      	b.n	8000ba6 <__udivmoddi4+0x96>
 8000c66:	f1c7 0c20 	rsb	ip, r7, #32
 8000c6a:	40bb      	lsls	r3, r7
 8000c6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c74:	fa01 f407 	lsl.w	r4, r1, r7
 8000c78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c84:	4325      	orrs	r5, r4
 8000c86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c8a:	0c2c      	lsrs	r4, r5, #16
 8000c8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000c90:	fa1f fa8e 	uxth.w	sl, lr
 8000c94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c98:	fb09 f40a 	mul.w	r4, r9, sl
 8000c9c:	429c      	cmp	r4, r3
 8000c9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000ca2:	fa00 f107 	lsl.w	r1, r0, r7
 8000ca6:	d90b      	bls.n	8000cc0 <__udivmoddi4+0x1b0>
 8000ca8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cb0:	f080 8087 	bcs.w	8000dc2 <__udivmoddi4+0x2b2>
 8000cb4:	429c      	cmp	r4, r3
 8000cb6:	f240 8084 	bls.w	8000dc2 <__udivmoddi4+0x2b2>
 8000cba:	f1a9 0902 	sub.w	r9, r9, #2
 8000cbe:	4473      	add	r3, lr
 8000cc0:	1b1b      	subs	r3, r3, r4
 8000cc2:	b2ad      	uxth	r5, r5
 8000cc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000ccc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cd4:	45a2      	cmp	sl, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x1da>
 8000cd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ce0:	d26b      	bcs.n	8000dba <__udivmoddi4+0x2aa>
 8000ce2:	45a2      	cmp	sl, r4
 8000ce4:	d969      	bls.n	8000dba <__udivmoddi4+0x2aa>
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	4474      	add	r4, lr
 8000cea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cee:	fba0 8902 	umull	r8, r9, r0, r2
 8000cf2:	eba4 040a 	sub.w	r4, r4, sl
 8000cf6:	454c      	cmp	r4, r9
 8000cf8:	46c2      	mov	sl, r8
 8000cfa:	464b      	mov	r3, r9
 8000cfc:	d354      	bcc.n	8000da8 <__udivmoddi4+0x298>
 8000cfe:	d051      	beq.n	8000da4 <__udivmoddi4+0x294>
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d069      	beq.n	8000dd8 <__udivmoddi4+0x2c8>
 8000d04:	ebb1 050a 	subs.w	r5, r1, sl
 8000d08:	eb64 0403 	sbc.w	r4, r4, r3
 8000d0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d10:	40fd      	lsrs	r5, r7
 8000d12:	40fc      	lsrs	r4, r7
 8000d14:	ea4c 0505 	orr.w	r5, ip, r5
 8000d18:	e9c6 5400 	strd	r5, r4, [r6]
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	e747      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000d20:	f1c2 0320 	rsb	r3, r2, #32
 8000d24:	fa20 f703 	lsr.w	r7, r0, r3
 8000d28:	4095      	lsls	r5, r2
 8000d2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d36:	4338      	orrs	r0, r7
 8000d38:	0c01      	lsrs	r1, r0, #16
 8000d3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d3e:	fa1f f885 	uxth.w	r8, r5
 8000d42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4a:	fb07 f308 	mul.w	r3, r7, r8
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	fa04 f402 	lsl.w	r4, r4, r2
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x256>
 8000d56:	1869      	adds	r1, r5, r1
 8000d58:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d5c:	d22f      	bcs.n	8000dbe <__udivmoddi4+0x2ae>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d92d      	bls.n	8000dbe <__udivmoddi4+0x2ae>
 8000d62:	3f02      	subs	r7, #2
 8000d64:	4429      	add	r1, r5
 8000d66:	1acb      	subs	r3, r1, r3
 8000d68:	b281      	uxth	r1, r0
 8000d6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb00 f308 	mul.w	r3, r0, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d907      	bls.n	8000d8e <__udivmoddi4+0x27e>
 8000d7e:	1869      	adds	r1, r5, r1
 8000d80:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d84:	d217      	bcs.n	8000db6 <__udivmoddi4+0x2a6>
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d915      	bls.n	8000db6 <__udivmoddi4+0x2a6>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4429      	add	r1, r5
 8000d8e:	1ac9      	subs	r1, r1, r3
 8000d90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d94:	e73b      	b.n	8000c0e <__udivmoddi4+0xfe>
 8000d96:	4637      	mov	r7, r6
 8000d98:	4630      	mov	r0, r6
 8000d9a:	e709      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000d9c:	4607      	mov	r7, r0
 8000d9e:	e6e7      	b.n	8000b70 <__udivmoddi4+0x60>
 8000da0:	4618      	mov	r0, r3
 8000da2:	e6fb      	b.n	8000b9c <__udivmoddi4+0x8c>
 8000da4:	4541      	cmp	r1, r8
 8000da6:	d2ab      	bcs.n	8000d00 <__udivmoddi4+0x1f0>
 8000da8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dac:	eb69 020e 	sbc.w	r2, r9, lr
 8000db0:	3801      	subs	r0, #1
 8000db2:	4613      	mov	r3, r2
 8000db4:	e7a4      	b.n	8000d00 <__udivmoddi4+0x1f0>
 8000db6:	4660      	mov	r0, ip
 8000db8:	e7e9      	b.n	8000d8e <__udivmoddi4+0x27e>
 8000dba:	4618      	mov	r0, r3
 8000dbc:	e795      	b.n	8000cea <__udivmoddi4+0x1da>
 8000dbe:	4667      	mov	r7, ip
 8000dc0:	e7d1      	b.n	8000d66 <__udivmoddi4+0x256>
 8000dc2:	4681      	mov	r9, r0
 8000dc4:	e77c      	b.n	8000cc0 <__udivmoddi4+0x1b0>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	442c      	add	r4, r5
 8000dca:	e747      	b.n	8000c5c <__udivmoddi4+0x14c>
 8000dcc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd0:	442b      	add	r3, r5
 8000dd2:	e72f      	b.n	8000c34 <__udivmoddi4+0x124>
 8000dd4:	4638      	mov	r0, r7
 8000dd6:	e708      	b.n	8000bea <__udivmoddi4+0xda>
 8000dd8:	4637      	mov	r7, r6
 8000dda:	e6e9      	b.n	8000bb0 <__udivmoddi4+0xa0>

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <ISL29033_RegRead>:
#include "isl29033.h"
#include "math.h"
//Чтение регистра ISL29033
uint8_t ISL29033_RegRead(ISL29033_Registers DataReg)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af02      	add	r7, sp, #8
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(ISL29033_I2C,ISL29033_ADR,&DataReg,1,10);
 8000dea:	1dfa      	adds	r2, r7, #7
 8000dec:	230a      	movs	r3, #10
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2301      	movs	r3, #1
 8000df2:	2188      	movs	r1, #136	; 0x88
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <ISL29033_RegRead+0x34>)
 8000df6:	f001 f881 	bl	8001efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ISL29033_I2C,ISL29033_ADR,&DataReg,1,10);
 8000dfa:	1dfa      	adds	r2, r7, #7
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2301      	movs	r3, #1
 8000e02:	2188      	movs	r1, #136	; 0x88
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <ISL29033_RegRead+0x34>)
 8000e06:	f001 f96d 	bl	80020e4 <HAL_I2C_Master_Receive>
	return DataReg;
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000090 	.word	0x20000090

08000e18 <ISL29033_RegWrite>:
//Запись в регистр ISL29033
void ISL29033_RegWrite(ISL29033_Registers DataReg,uint8_t Data)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af02      	add	r7, sp, #8
 8000e1e:	4603      	mov	r3, r0
 8000e20:	460a      	mov	r2, r1
 8000e22:	71fb      	strb	r3, [r7, #7]
 8000e24:	4613      	mov	r3, r2
 8000e26:	71bb      	strb	r3, [r7, #6]
	uint8_t Data_t[2]={DataReg,Data};
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	733b      	strb	r3, [r7, #12]
 8000e2c:	79bb      	ldrb	r3, [r7, #6]
 8000e2e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(ISL29033_I2C,ISL29033_ADR,Data_t,2,10);
 8000e30:	f107 020c 	add.w	r2, r7, #12
 8000e34:	230a      	movs	r3, #10
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2302      	movs	r3, #2
 8000e3a:	2188      	movs	r1, #136	; 0x88
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <ISL29033_RegWrite+0x34>)
 8000e3e:	f001 f85d 	bl	8001efc <HAL_I2C_Master_Transmit>
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000090 	.word	0x20000090

08000e50 <ISL29033_config1>:
//Настройка первого регистра конфигурации
void ISL29033_config1(ISL29033_mode mode,ISL29033_NumOfCycles NumOfCycles)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	460a      	mov	r2, r1
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	71bb      	strb	r3, [r7, #6]
	ISL29033_RegWrite(COMMAND_REG1,mode|NumOfCycles);
 8000e60:	79fa      	ldrb	r2, [r7, #7]
 8000e62:	79bb      	ldrb	r3, [r7, #6]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4619      	mov	r1, r3
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff ffd4 	bl	8000e18 <ISL29033_RegWrite>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <ISL29033_config2>:
//Настройка второго регистра конфигурации
void ISL29033_config2(ISL29033_ADCRes ADCRes,ISL29033_LUXrange LUXrange)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460a      	mov	r2, r1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	4613      	mov	r3, r2
 8000e86:	71bb      	strb	r3, [r7, #6]
	ISL29033_RegWrite(COMMAND_REG2,ADCRes|LUXrange);
 8000e88:	79fa      	ldrb	r2, [r7, #7]
 8000e8a:	79bb      	ldrb	r3, [r7, #6]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	4619      	mov	r1, r3
 8000e92:	2001      	movs	r0, #1
 8000e94:	f7ff ffc0 	bl	8000e18 <ISL29033_RegWrite>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <ISL29033_Standby>:
// Режим низкого энергопотребления ISL29033
void ISL29033_Standby(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	ISL29033_config1(Standby,cycles_1);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff ffd2 	bl	8000e50 <ISL29033_config1>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <ISL29033_init>:
// Инициализация ISL29033
void ISL29033_init(ISL29033_mode mode,ISL29033_NumOfCycles NumOfCycles,
		           ISL29033_ADCRes ADCRes,ISL29033_LUXrange LUXrange)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	4608      	mov	r0, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71bb      	strb	r3, [r7, #6]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	717b      	strb	r3, [r7, #5]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	713b      	strb	r3, [r7, #4]
	ISL29033_Standby();
 8000ece:	f7ff ffe7 	bl	8000ea0 <ISL29033_Standby>
	HAL_Delay(1);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f000 fcba 	bl	800184c <HAL_Delay>
	ISL29033_config1(mode,NumOfCycles);
 8000ed8:	79ba      	ldrb	r2, [r7, #6]
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ffb6 	bl	8000e50 <ISL29033_config1>
	ISL29033_config2(ADCRes,LUXrange);
 8000ee4:	793a      	ldrb	r2, [r7, #4]
 8000ee6:	797b      	ldrb	r3, [r7, #5]
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ffc4 	bl	8000e78 <ISL29033_config2>
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd90      	pop	{r4, r7, pc}

08000ef8 <ISL29033_DataReadADC>:
//Чтение значения освещенности ISL29033
uint16_t ISL29033_DataReadADC(void)
{
 8000ef8:	b598      	push	{r3, r4, r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	return ISL29033_RegRead(DATA_REG1)+(ISL29033_RegRead(DATA_REG2)<<8);
 8000efc:	2002      	movs	r0, #2
 8000efe:	f7ff ff6f 	bl	8000de0 <ISL29033_RegRead>
 8000f02:	4603      	mov	r3, r0
 8000f04:	b29c      	uxth	r4, r3
 8000f06:	2003      	movs	r0, #3
 8000f08:	f7ff ff6a 	bl	8000de0 <ISL29033_RegRead>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	4423      	add	r3, r4
 8000f16:	b29b      	uxth	r3, r3
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	bd98      	pop	{r3, r4, r7, pc}
 8000f1c:	0000      	movs	r0, r0
	...

08000f20 <ISL29033_ADCtoLUX>:
//Перевод значения с АЦП в Люксы
void ISL29033_ADCtoLUX(ISL29033_ADCRes ADCRes,ISL29033_LUXrange LUXrange,uint16_t *data)
{
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	603a      	str	r2, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	71bb      	strb	r3, [r7, #6]
	switch(ADCRes)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2b0c      	cmp	r3, #12
 8000f34:	f200 80f6 	bhi.w	8001124 <ISL29033_ADCtoLUX+0x204>
 8000f38:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <ISL29033_ADCtoLUX+0x20>)
 8000f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3e:	bf00      	nop
 8000f40:	08000f75 	.word	0x08000f75
 8000f44:	08001125 	.word	0x08001125
 8000f48:	08001125 	.word	0x08001125
 8000f4c:	08001125 	.word	0x08001125
 8000f50:	08000fe1 	.word	0x08000fe1
 8000f54:	08001125 	.word	0x08001125
 8000f58:	08001125 	.word	0x08001125
 8000f5c:	08001125 	.word	0x08001125
 8000f60:	0800104d 	.word	0x0800104d
 8000f64:	08001125 	.word	0x08001125
 8000f68:	08001125 	.word	0x08001125
 8000f6c:	08001125 	.word	0x08001125
 8000f70:	080010b9 	.word	0x080010b9
	{
	case  Resolution_16b:
		*data=*data*pow(4,LUXrange)*125/65536;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fa77 	bl	800046c <__aeabi_i2d>
 8000f7e:	4604      	mov	r4, r0
 8000f80:	460d      	mov	r5, r1
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fa61 	bl	800044c <__aeabi_ui2d>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	ec43 2b11 	vmov	d1, r2, r3
 8000f92:	ed9f 0b67 	vldr	d0, [pc, #412]	; 8001130 <ISL29033_ADCtoLUX+0x210>
 8000f96:	f003 fc11 	bl	80047bc <pow>
 8000f9a:	ec53 2b10 	vmov	r2, r3, d0
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	4629      	mov	r1, r5
 8000fa2:	f7ff facd 	bl	8000540 <__aeabi_dmul>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460c      	mov	r4, r1
 8000faa:	4618      	mov	r0, r3
 8000fac:	4621      	mov	r1, r4
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	4b61      	ldr	r3, [pc, #388]	; (8001138 <ISL29033_ADCtoLUX+0x218>)
 8000fb4:	f7ff fac4 	bl	8000540 <__aeabi_dmul>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	460c      	mov	r4, r1
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	4621      	mov	r1, r4
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	4b5d      	ldr	r3, [pc, #372]	; (800113c <ISL29033_ADCtoLUX+0x21c>)
 8000fc6:	f7ff fbe5 	bl	8000794 <__aeabi_ddiv>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460c      	mov	r4, r1
 8000fce:	4618      	mov	r0, r3
 8000fd0:	4621      	mov	r1, r4
 8000fd2:	f7ff fd65 	bl	8000aa0 <__aeabi_d2uiz>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	801a      	strh	r2, [r3, #0]
		break;
 8000fde:	e0a1      	b.n	8001124 <ISL29033_ADCtoLUX+0x204>
	case  Resolution_12b:
		*data=*data*pow(4,LUXrange)*125/4096;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fa41 	bl	800046c <__aeabi_i2d>
 8000fea:	4604      	mov	r4, r0
 8000fec:	460d      	mov	r5, r1
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fa2b 	bl	800044c <__aeabi_ui2d>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	ec43 2b11 	vmov	d1, r2, r3
 8000ffe:	ed9f 0b4c 	vldr	d0, [pc, #304]	; 8001130 <ISL29033_ADCtoLUX+0x210>
 8001002:	f003 fbdb 	bl	80047bc <pow>
 8001006:	ec53 2b10 	vmov	r2, r3, d0
 800100a:	4620      	mov	r0, r4
 800100c:	4629      	mov	r1, r5
 800100e:	f7ff fa97 	bl	8000540 <__aeabi_dmul>
 8001012:	4603      	mov	r3, r0
 8001014:	460c      	mov	r4, r1
 8001016:	4618      	mov	r0, r3
 8001018:	4621      	mov	r1, r4
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	4b46      	ldr	r3, [pc, #280]	; (8001138 <ISL29033_ADCtoLUX+0x218>)
 8001020:	f7ff fa8e 	bl	8000540 <__aeabi_dmul>
 8001024:	4603      	mov	r3, r0
 8001026:	460c      	mov	r4, r1
 8001028:	4618      	mov	r0, r3
 800102a:	4621      	mov	r1, r4
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	4b43      	ldr	r3, [pc, #268]	; (8001140 <ISL29033_ADCtoLUX+0x220>)
 8001032:	f7ff fbaf 	bl	8000794 <__aeabi_ddiv>
 8001036:	4603      	mov	r3, r0
 8001038:	460c      	mov	r4, r1
 800103a:	4618      	mov	r0, r3
 800103c:	4621      	mov	r1, r4
 800103e:	f7ff fd2f 	bl	8000aa0 <__aeabi_d2uiz>
 8001042:	4603      	mov	r3, r0
 8001044:	b29a      	uxth	r2, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	801a      	strh	r2, [r3, #0]
		break;
 800104a:	e06b      	b.n	8001124 <ISL29033_ADCtoLUX+0x204>
	case  Resolution_8b:
		*data=*data*pow(4,LUXrange)*125/256;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa0b 	bl	800046c <__aeabi_i2d>
 8001056:	4604      	mov	r4, r0
 8001058:	460d      	mov	r5, r1
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff f9f5 	bl	800044c <__aeabi_ui2d>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	ec43 2b11 	vmov	d1, r2, r3
 800106a:	ed9f 0b31 	vldr	d0, [pc, #196]	; 8001130 <ISL29033_ADCtoLUX+0x210>
 800106e:	f003 fba5 	bl	80047bc <pow>
 8001072:	ec53 2b10 	vmov	r2, r3, d0
 8001076:	4620      	mov	r0, r4
 8001078:	4629      	mov	r1, r5
 800107a:	f7ff fa61 	bl	8000540 <__aeabi_dmul>
 800107e:	4603      	mov	r3, r0
 8001080:	460c      	mov	r4, r1
 8001082:	4618      	mov	r0, r3
 8001084:	4621      	mov	r1, r4
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <ISL29033_ADCtoLUX+0x218>)
 800108c:	f7ff fa58 	bl	8000540 <__aeabi_dmul>
 8001090:	4603      	mov	r3, r0
 8001092:	460c      	mov	r4, r1
 8001094:	4618      	mov	r0, r3
 8001096:	4621      	mov	r1, r4
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <ISL29033_ADCtoLUX+0x224>)
 800109e:	f7ff fb79 	bl	8000794 <__aeabi_ddiv>
 80010a2:	4603      	mov	r3, r0
 80010a4:	460c      	mov	r4, r1
 80010a6:	4618      	mov	r0, r3
 80010a8:	4621      	mov	r1, r4
 80010aa:	f7ff fcf9 	bl	8000aa0 <__aeabi_d2uiz>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	801a      	strh	r2, [r3, #0]
		break;
 80010b6:	e035      	b.n	8001124 <ISL29033_ADCtoLUX+0x204>
	case  Resolution_4b:
		*data=*data*pow(4,LUXrange)*125/16;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f9d5 	bl	800046c <__aeabi_i2d>
 80010c2:	4604      	mov	r4, r0
 80010c4:	460d      	mov	r5, r1
 80010c6:	79bb      	ldrb	r3, [r7, #6]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f9bf 	bl	800044c <__aeabi_ui2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	ec43 2b11 	vmov	d1, r2, r3
 80010d6:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001130 <ISL29033_ADCtoLUX+0x210>
 80010da:	f003 fb6f 	bl	80047bc <pow>
 80010de:	ec53 2b10 	vmov	r2, r3, d0
 80010e2:	4620      	mov	r0, r4
 80010e4:	4629      	mov	r1, r5
 80010e6:	f7ff fa2b 	bl	8000540 <__aeabi_dmul>
 80010ea:	4603      	mov	r3, r0
 80010ec:	460c      	mov	r4, r1
 80010ee:	4618      	mov	r0, r3
 80010f0:	4621      	mov	r1, r4
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <ISL29033_ADCtoLUX+0x218>)
 80010f8:	f7ff fa22 	bl	8000540 <__aeabi_dmul>
 80010fc:	4603      	mov	r3, r0
 80010fe:	460c      	mov	r4, r1
 8001100:	4618      	mov	r0, r3
 8001102:	4621      	mov	r1, r4
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <ISL29033_ADCtoLUX+0x228>)
 800110a:	f7ff fb43 	bl	8000794 <__aeabi_ddiv>
 800110e:	4603      	mov	r3, r0
 8001110:	460c      	mov	r4, r1
 8001112:	4618      	mov	r0, r3
 8001114:	4621      	mov	r1, r4
 8001116:	f7ff fcc3 	bl	8000aa0 <__aeabi_d2uiz>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	801a      	strh	r2, [r3, #0]
		break;
 8001122:	bf00      	nop
	}
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bdb0      	pop	{r4, r5, r7, pc}
 800112c:	f3af 8000 	nop.w
 8001130:	00000000 	.word	0x00000000
 8001134:	40100000 	.word	0x40100000
 8001138:	405f4000 	.word	0x405f4000
 800113c:	40f00000 	.word	0x40f00000
 8001140:	40b00000 	.word	0x40b00000
 8001144:	40700000 	.word	0x40700000
 8001148:	40300000 	.word	0x40300000

0800114c <convert_uint32_to_charArray>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void convert_uint32_to_charArray(uint32_t number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 800114c:	b480      	push	{r7}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	4611      	mov	r1, r2
 8001158:	461a      	mov	r2, r3
 800115a:	460b      	mov	r3, r1
 800115c:	80fb      	strh	r3, [r7, #6]
 800115e:	4613      	mov	r3, r2
 8001160:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < len; i++)
 8001162:	2300      	movs	r3, #0
 8001164:	82fb      	strh	r3, [r7, #22]
 8001166:	e01f      	b.n	80011a8 <convert_uint32_to_charArray+0x5c>
	{
		mass[len - 1 - i + startMass] = number % 10 + 48;
 8001168:	68f9      	ldr	r1, [r7, #12]
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <convert_uint32_to_charArray+0x70>)
 800116c:	fba3 2301 	umull	r2, r3, r3, r1
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	1aca      	subs	r2, r1, r3
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	88bb      	ldrh	r3, [r7, #4]
 8001180:	1e59      	subs	r1, r3, #1
 8001182:	8afb      	ldrh	r3, [r7, #22]
 8001184:	1ac9      	subs	r1, r1, r3
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	440b      	add	r3, r1
 800118a:	4619      	mov	r1, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	440b      	add	r3, r1
 8001190:	3230      	adds	r2, #48	; 0x30
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]
		number = number / 10;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4a08      	ldr	r2, [pc, #32]	; (80011bc <convert_uint32_to_charArray+0x70>)
 800119a:	fba2 2303 	umull	r2, r3, r2, r3
 800119e:	08db      	lsrs	r3, r3, #3
 80011a0:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 80011a2:	8afb      	ldrh	r3, [r7, #22]
 80011a4:	3301      	adds	r3, #1
 80011a6:	82fb      	strh	r3, [r7, #22]
 80011a8:	8afa      	ldrh	r2, [r7, #22]
 80011aa:	88bb      	ldrh	r3, [r7, #4]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d3db      	bcc.n	8001168 <convert_uint32_to_charArray+0x1c>
	}
}
 80011b0:	bf00      	nop
 80011b2:	371c      	adds	r7, #28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	cccccccd 	.word	0xcccccccd

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c6:	f000 fac5 	bl	8001754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ca:	f000 f82f 	bl	800122c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ce:	f000 f915 	bl	80013fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011d2:	f000 f8e3 	bl	800139c <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80011d6:	f000 f8a1 	bl	800131c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ISL29033_init(ALS_continuous,cycles_16,Resolution_16b,Luxrange_3);
 80011da:	2302      	movs	r3, #2
 80011dc:	2200      	movs	r2, #0
 80011de:	2103      	movs	r1, #3
 80011e0:	20a0      	movs	r0, #160	; 0xa0
 80011e2:	f7ff fe65 	bl	8000eb0 <ISL29033_init>
  uint16_t data=0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	81fb      	strh	r3, [r7, #14]
  char mass[7];
  mass[6]='\n';
 80011ea:	230a      	movs	r3, #10
 80011ec:	72bb      	strb	r3, [r7, #10]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  data=ISL29033_DataReadADC();
 80011ee:	f7ff fe83 	bl	8000ef8 <ISL29033_DataReadADC>
 80011f2:	4603      	mov	r3, r0
 80011f4:	81fb      	strh	r3, [r7, #14]
	  ISL29033_ADCtoLUX(Resolution_16b,Luxrange_3,&data);
 80011f6:	f107 030e 	add.w	r3, r7, #14
 80011fa:	461a      	mov	r2, r3
 80011fc:	2102      	movs	r1, #2
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff fe8e 	bl	8000f20 <ISL29033_ADCtoLUX>
	  convert_uint32_to_charArray(data,mass,0,6);
 8001204:	89fb      	ldrh	r3, [r7, #14]
 8001206:	4618      	mov	r0, r3
 8001208:	1d39      	adds	r1, r7, #4
 800120a:	2306      	movs	r3, #6
 800120c:	2200      	movs	r2, #0
 800120e:	f7ff ff9d 	bl	800114c <convert_uint32_to_charArray>
	  HAL_UART_Transmit(&huart2,mass,7,10);
 8001212:	1d39      	adds	r1, r7, #4
 8001214:	230a      	movs	r3, #10
 8001216:	2207      	movs	r2, #7
 8001218:	4803      	ldr	r0, [pc, #12]	; (8001228 <main+0x68>)
 800121a:	f002 fe1d 	bl	8003e58 <HAL_UART_Transmit>
	  HAL_Delay(100);
 800121e:	2064      	movs	r0, #100	; 0x64
 8001220:	f000 fb14 	bl	800184c <HAL_Delay>
	  data=ISL29033_DataReadADC();
 8001224:	e7e3      	b.n	80011ee <main+0x2e>
 8001226:	bf00      	nop
 8001228:	200000dc 	.word	0x200000dc

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0b8      	sub	sp, #224	; 0xe0
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001236:	2244      	movs	r2, #68	; 0x44
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f003 fab6 	bl	80047ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001250:	463b      	mov	r3, r7
 8001252:	2288      	movs	r2, #136	; 0x88
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f003 faa8 	bl	80047ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001266:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126a:	2310      	movs	r3, #16
 800126c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001276:	2302      	movs	r3, #2
 8001278:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800127c:	2301      	movs	r3, #1
 800127e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001282:	230a      	movs	r3, #10
 8001284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001288:	2307      	movs	r3, #7
 800128a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 faf2 	bl	8002888 <HAL_RCC_OscConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012aa:	f000 f91b 	bl	80014e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	230f      	movs	r3, #15
 80012b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b4:	2303      	movs	r3, #3
 80012b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80012d0:	2104      	movs	r1, #4
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 febe 	bl	8003054 <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80012de:	f000 f901 	bl	80014e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C3;
 80012e2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80012e6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 f8b2 	bl	800345c <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80012fe:	f000 f8f1 	bl	80014e4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001302:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001306:	f001 fa69 	bl	80027dc <HAL_PWREx_ControlVoltageScaling>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001310:	f000 f8e8 	bl	80014e4 <Error_Handler>
  }
}
 8001314:	bf00      	nop
 8001316:	37e0      	adds	r7, #224	; 0xe0
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <MX_I2C3_Init+0x74>)
 8001322:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <MX_I2C3_Init+0x78>)
 8001324:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_I2C3_Init+0x74>)
 8001328:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <MX_I2C3_Init+0x7c>)
 800132a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_I2C3_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_I2C3_Init+0x74>)
 8001334:	2201      	movs	r2, #1
 8001336:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_I2C3_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_I2C3_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_I2C3_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_I2C3_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_I2C3_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001356:	480e      	ldr	r0, [pc, #56]	; (8001390 <MX_I2C3_Init+0x74>)
 8001358:	f000 fd40 	bl	8001ddc <HAL_I2C_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001362:	f000 f8bf 	bl	80014e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001366:	2100      	movs	r1, #0
 8001368:	4809      	ldr	r0, [pc, #36]	; (8001390 <MX_I2C3_Init+0x74>)
 800136a:	f001 f991 	bl	8002690 <HAL_I2CEx_ConfigAnalogFilter>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001374:	f000 f8b6 	bl	80014e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001378:	2100      	movs	r1, #0
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_I2C3_Init+0x74>)
 800137c:	f001 f9d3 	bl	8002726 <HAL_I2CEx_ConfigDigitalFilter>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001386:	f000 f8ad 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000090 	.word	0x20000090
 8001394:	40005c00 	.word	0x40005c00
 8001398:	10909cec 	.word	0x10909cec

0800139c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <MX_USART2_UART_Init+0x58>)
 80013a2:	4a15      	ldr	r2, [pc, #84]	; (80013f8 <MX_USART2_UART_Init+0x5c>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <MX_USART2_UART_Init+0x58>)
 80013a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_USART2_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_USART2_UART_Init+0x58>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_USART2_UART_Init+0x58>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_USART2_UART_Init+0x58>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_USART2_UART_Init+0x58>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_USART2_UART_Init+0x58>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_USART2_UART_Init+0x58>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_USART2_UART_Init+0x58>)
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_USART2_UART_Init+0x58>)
 80013e0:	f002 fcec 	bl	8003dbc <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013ea:	f000 f87b 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200000dc 	.word	0x200000dc
 80013f8:	40004400 	.word	0x40004400

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <MX_GPIO_Init+0xdc>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a30      	ldr	r2, [pc, #192]	; (80014d8 <MX_GPIO_Init+0xdc>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <MX_GPIO_Init+0xdc>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142a:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <MX_GPIO_Init+0xdc>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	4a2a      	ldr	r2, [pc, #168]	; (80014d8 <MX_GPIO_Init+0xdc>)
 8001430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <MX_GPIO_Init+0xdc>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <MX_GPIO_Init+0xdc>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	4a24      	ldr	r2, [pc, #144]	; (80014d8 <MX_GPIO_Init+0xdc>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <MX_GPIO_Init+0xdc>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <MX_GPIO_Init+0xdc>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a1e      	ldr	r2, [pc, #120]	; (80014d8 <MX_GPIO_Init+0xdc>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <MX_GPIO_Init+0xdc>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	2120      	movs	r1, #32
 8001476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147a:	f000 fc97 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800147e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <MX_GPIO_Init+0xe0>)
 8001486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4813      	ldr	r0, [pc, #76]	; (80014e0 <MX_GPIO_Init+0xe4>)
 8001494:	f000 fae2 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001498:	2304      	movs	r3, #4
 800149a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	480d      	ldr	r0, [pc, #52]	; (80014e0 <MX_GPIO_Init+0xe4>)
 80014ac:	f000 fad6 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014b0:	2320      	movs	r3, #32
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ca:	f000 fac7 	bl	8001a5c <HAL_GPIO_Init>

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	; 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	10210000 	.word	0x10210000
 80014e0:	48000800 	.word	0x48000800

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ea:	e7fe      	b.n	80014ea <Error_Handler+0x6>

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_MspInit+0x44>)
 80014f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_MspInit+0x44>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6613      	str	r3, [r2, #96]	; 0x60
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_MspInit+0x44>)
 8001500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_MspInit+0x44>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_MspInit+0x44>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	6593      	str	r3, [r2, #88]	; 0x58
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_MspInit+0x44>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000

08001534 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a17      	ldr	r2, [pc, #92]	; (80015b0 <HAL_I2C_MspInit+0x7c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d127      	bne.n	80015a6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <HAL_I2C_MspInit+0x80>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	4a16      	ldr	r2, [pc, #88]	; (80015b4 <HAL_I2C_MspInit+0x80>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <HAL_I2C_MspInit+0x80>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800156e:	2303      	movs	r3, #3
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001572:	2312      	movs	r3, #18
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001576:	2301      	movs	r3, #1
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800157e:	2304      	movs	r3, #4
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	480b      	ldr	r0, [pc, #44]	; (80015b8 <HAL_I2C_MspInit+0x84>)
 800158a:	f000 fa67 	bl	8001a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_I2C_MspInit+0x80>)
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <HAL_I2C_MspInit+0x80>)
 8001594:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001598:	6593      	str	r3, [r2, #88]	; 0x58
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_I2C_MspInit+0x80>)
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	; 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40005c00 	.word	0x40005c00
 80015b4:	40021000 	.word	0x40021000
 80015b8:	48000800 	.word	0x48000800

080015bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a17      	ldr	r2, [pc, #92]	; (8001638 <HAL_UART_MspInit+0x7c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d128      	bne.n	8001630 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_UART_MspInit+0x80>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	4a16      	ldr	r2, [pc, #88]	; (800163c <HAL_UART_MspInit+0x80>)
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	6593      	str	r3, [r2, #88]	; 0x58
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_UART_MspInit+0x80>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_UART_MspInit+0x80>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	4a10      	ldr	r2, [pc, #64]	; (800163c <HAL_UART_MspInit+0x80>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_UART_MspInit+0x80>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800160e:	230c      	movs	r3, #12
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800161e:	2307      	movs	r3, #7
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162c:	f000 fa16 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001630:	bf00      	nop
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40004400 	.word	0x40004400
 800163c:	40021000 	.word	0x40021000

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <NMI_Handler+0x4>

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168c:	f000 f8be 	bl	800180c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <SystemInit+0x64>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169e:	4a16      	ldr	r2, [pc, #88]	; (80016f8 <SystemInit+0x64>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <SystemInit+0x68>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a13      	ldr	r2, [pc, #76]	; (80016fc <SystemInit+0x68>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <SystemInit+0x68>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <SystemInit+0x68>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a0f      	ldr	r2, [pc, #60]	; (80016fc <SystemInit+0x68>)
 80016c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80016c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80016c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <SystemInit+0x68>)
 80016cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <SystemInit+0x68>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a09      	ldr	r2, [pc, #36]	; (80016fc <SystemInit+0x68>)
 80016d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <SystemInit+0x68>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <SystemInit+0x64>)
 80016e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ea:	609a      	str	r2, [r3, #8]
#endif
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00
 80016fc:	40021000 	.word	0x40021000

08001700 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001738 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001704:	f7ff ffc6 	bl	8001694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001708:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800170a:	e003      	b.n	8001714 <LoopCopyDataInit>

0800170c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800170e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001710:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001712:	3104      	adds	r1, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001714:	480a      	ldr	r0, [pc, #40]	; (8001740 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001718:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800171a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800171c:	d3f6      	bcc.n	800170c <CopyDataInit>
	ldr	r2, =_sbss
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001720:	e002      	b.n	8001728 <LoopFillZerobss>

08001722 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001722:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001724:	f842 3b04 	str.w	r3, [r2], #4

08001728 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <LoopForever+0x16>)
	cmp	r2, r3
 800172a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800172c:	d3f9      	bcc.n	8001722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800172e:	f003 f819 	bl	8004764 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001732:	f7ff fd45 	bl	80011c0 <main>

08001736 <LoopForever>:

LoopForever:
    b LoopForever
 8001736:	e7fe      	b.n	8001736 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001738:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800173c:	08005928 	.word	0x08005928
	ldr	r0, =_sdata
 8001740:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001744:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001748:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800174c:	20000160 	.word	0x20000160

08001750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC1_2_IRQHandler>
	...

08001754 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_Init+0x3c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <HAL_Init+0x3c>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176a:	2003      	movs	r0, #3
 800176c:	f000 f942 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001770:	2000      	movs	r0, #0
 8001772:	f000 f80f 	bl	8001794 <HAL_InitTick>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	71fb      	strb	r3, [r7, #7]
 8001780:	e001      	b.n	8001786 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001782:	f7ff feb3 	bl	80014ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001786:	79fb      	ldrb	r3, [r7, #7]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40022000 	.word	0x40022000

08001794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_InitTick+0x6c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d023      	beq.n	80017f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_InitTick+0x70>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_InitTick+0x6c>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4619      	mov	r1, r3
 80017b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f93f 	bl	8001a42 <HAL_SYSTICK_Config>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10f      	bne.n	80017ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b0f      	cmp	r3, #15
 80017ce:	d809      	bhi.n	80017e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d0:	2200      	movs	r2, #0
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017d8:	f000 f917 	bl	8001a0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <HAL_InitTick+0x74>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e007      	b.n	80017f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e004      	b.n	80017f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	e001      	b.n	80017f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000008 	.word	0x20000008
 8001804:	20000000 	.word	0x20000000
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_IncTick+0x20>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_IncTick+0x24>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4a04      	ldr	r2, [pc, #16]	; (8001830 <HAL_IncTick+0x24>)
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000008 	.word	0x20000008
 8001830:	2000015c 	.word	0x2000015c

08001834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <HAL_GetTick+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	2000015c 	.word	0x2000015c

0800184c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff ffee 	bl	8001834 <HAL_GetTick>
 8001858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001864:	d005      	beq.n	8001872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_Delay+0x40>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001872:	bf00      	nop
 8001874:	f7ff ffde 	bl	8001834 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	429a      	cmp	r2, r3
 8001882:	d8f7      	bhi.n	8001874 <HAL_Delay+0x28>
  {
  }
}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000008 	.word	0x20000008

08001890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c2:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	; (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	; 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019d4:	f7ff ff8e 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff47 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff5c 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff8e 	bl	8001948 <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5d 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffb0 	bl	80019b0 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6a:	e17f      	b.n	8001d6c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8171 	beq.w	8001d66 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d00b      	beq.n	8001aa4 <HAL_GPIO_Init+0x48>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d007      	beq.n	8001aa4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a98:	2b11      	cmp	r3, #17
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b12      	cmp	r3, #18
 8001aa2:	d130      	bne.n	8001b06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ada:	2201      	movs	r2, #1
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	091b      	lsrs	r3, r3, #4
 8001af0:	f003 0201 	and.w	r2, r3, #1
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d118      	bne.n	8001b44 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	08db      	lsrs	r3, r3, #3
 8001b2e:	f003 0201 	and.w	r2, r3, #1
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x128>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b12      	cmp	r3, #18
 8001b82:	d123      	bne.n	8001bcc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	08da      	lsrs	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3208      	adds	r2, #8
 8001b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	220f      	movs	r2, #15
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	08da      	lsrs	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3208      	adds	r2, #8
 8001bc6:	6939      	ldr	r1, [r7, #16]
 8001bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0203 	and.w	r2, r3, #3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80ac 	beq.w	8001d66 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0e:	4b5e      	ldr	r3, [pc, #376]	; (8001d88 <HAL_GPIO_Init+0x32c>)
 8001c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c12:	4a5d      	ldr	r2, [pc, #372]	; (8001d88 <HAL_GPIO_Init+0x32c>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6613      	str	r3, [r2, #96]	; 0x60
 8001c1a:	4b5b      	ldr	r3, [pc, #364]	; (8001d88 <HAL_GPIO_Init+0x32c>)
 8001c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c26:	4a59      	ldr	r2, [pc, #356]	; (8001d8c <HAL_GPIO_Init+0x330>)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c50:	d025      	beq.n	8001c9e <HAL_GPIO_Init+0x242>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4e      	ldr	r2, [pc, #312]	; (8001d90 <HAL_GPIO_Init+0x334>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d01f      	beq.n	8001c9a <HAL_GPIO_Init+0x23e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4d      	ldr	r2, [pc, #308]	; (8001d94 <HAL_GPIO_Init+0x338>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d019      	beq.n	8001c96 <HAL_GPIO_Init+0x23a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4c      	ldr	r2, [pc, #304]	; (8001d98 <HAL_GPIO_Init+0x33c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_GPIO_Init+0x236>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4b      	ldr	r2, [pc, #300]	; (8001d9c <HAL_GPIO_Init+0x340>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00d      	beq.n	8001c8e <HAL_GPIO_Init+0x232>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4a      	ldr	r2, [pc, #296]	; (8001da0 <HAL_GPIO_Init+0x344>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d007      	beq.n	8001c8a <HAL_GPIO_Init+0x22e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a49      	ldr	r2, [pc, #292]	; (8001da4 <HAL_GPIO_Init+0x348>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_GPIO_Init+0x22a>
 8001c82:	2306      	movs	r3, #6
 8001c84:	e00c      	b.n	8001ca0 <HAL_GPIO_Init+0x244>
 8001c86:	2307      	movs	r3, #7
 8001c88:	e00a      	b.n	8001ca0 <HAL_GPIO_Init+0x244>
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	e008      	b.n	8001ca0 <HAL_GPIO_Init+0x244>
 8001c8e:	2304      	movs	r3, #4
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x244>
 8001c92:	2303      	movs	r3, #3
 8001c94:	e004      	b.n	8001ca0 <HAL_GPIO_Init+0x244>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_Init+0x244>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x244>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	f002 0203 	and.w	r2, r2, #3
 8001ca6:	0092      	lsls	r2, r2, #2
 8001ca8:	4093      	lsls	r3, r2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cb0:	4936      	ldr	r1, [pc, #216]	; (8001d8c <HAL_GPIO_Init+0x330>)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cbe:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <HAL_GPIO_Init+0x34c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ce2:	4a31      	ldr	r2, [pc, #196]	; (8001da8 <HAL_GPIO_Init+0x34c>)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001ce8:	4b2f      	ldr	r3, [pc, #188]	; (8001da8 <HAL_GPIO_Init+0x34c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d0c:	4a26      	ldr	r2, [pc, #152]	; (8001da8 <HAL_GPIO_Init+0x34c>)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d12:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <HAL_GPIO_Init+0x34c>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <HAL_GPIO_Init+0x34c>)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_GPIO_Init+0x34c>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d60:	4a11      	ldr	r2, [pc, #68]	; (8001da8 <HAL_GPIO_Init+0x34c>)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa22 f303 	lsr.w	r3, r2, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f47f ae78 	bne.w	8001a6c <HAL_GPIO_Init+0x10>
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40010000 	.word	0x40010000
 8001d90:	48000400 	.word	0x48000400
 8001d94:	48000800 	.word	0x48000800
 8001d98:	48000c00 	.word	0x48000c00
 8001d9c:	48001000 	.word	0x48001000
 8001da0:	48001400 	.word	0x48001400
 8001da4:	48001800 	.word	0x48001800
 8001da8:	40010400 	.word	0x40010400

08001dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
 8001db8:	4613      	mov	r3, r2
 8001dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dbc:	787b      	ldrb	r3, [r7, #1]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dc8:	e002      	b.n	8001dd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e081      	b.n	8001ef2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff fb96 	bl	8001534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2224      	movs	r2, #36	; 0x24
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d107      	bne.n	8001e56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	e006      	b.n	8001e64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d104      	bne.n	8001e76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	ea42 0103 	orr.w	r1, r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	021a      	lsls	r2, r3, #8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69d9      	ldr	r1, [r3, #28]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1a      	ldr	r2, [r3, #32]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	461a      	mov	r2, r3
 8001f08:	460b      	mov	r3, r1
 8001f0a:	817b      	strh	r3, [r7, #10]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	f040 80da 	bne.w	80020d2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_I2C_Master_Transmit+0x30>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e0d3      	b.n	80020d4 <HAL_I2C_Master_Transmit+0x1d8>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f34:	f7ff fc7e 	bl	8001834 <HAL_GetTick>
 8001f38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2319      	movs	r3, #25
 8001f40:	2201      	movs	r2, #1
 8001f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f9e6 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0be      	b.n	80020d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2221      	movs	r2, #33	; 0x21
 8001f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2210      	movs	r2, #16
 8001f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	893a      	ldrh	r2, [r7, #8]
 8001f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2bff      	cmp	r3, #255	; 0xff
 8001f86:	d90e      	bls.n	8001fa6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	22ff      	movs	r2, #255	; 0xff
 8001f8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	8979      	ldrh	r1, [r7, #10]
 8001f96:	4b51      	ldr	r3, [pc, #324]	; (80020dc <HAL_I2C_Master_Transmit+0x1e0>)
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 fb48 	bl	8002634 <I2C_TransferConfig>
 8001fa4:	e06c      	b.n	8002080 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	8979      	ldrh	r1, [r7, #10]
 8001fb8:	4b48      	ldr	r3, [pc, #288]	; (80020dc <HAL_I2C_Master_Transmit+0x1e0>)
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 fb37 	bl	8002634 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001fc6:	e05b      	b.n	8002080 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	6a39      	ldr	r1, [r7, #32]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 f9e3 	bl	8002398 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e07b      	b.n	80020d4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	781a      	ldrb	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002004:	3b01      	subs	r3, #1
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d034      	beq.n	8002080 <HAL_I2C_Master_Transmit+0x184>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201a:	2b00      	cmp	r3, #0
 800201c:	d130      	bne.n	8002080 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	2200      	movs	r2, #0
 8002026:	2180      	movs	r1, #128	; 0x80
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f975 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e04d      	b.n	80020d4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203c:	b29b      	uxth	r3, r3
 800203e:	2bff      	cmp	r3, #255	; 0xff
 8002040:	d90e      	bls.n	8002060 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	22ff      	movs	r2, #255	; 0xff
 8002046:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204c:	b2da      	uxtb	r2, r3
 800204e:	8979      	ldrh	r1, [r7, #10]
 8002050:	2300      	movs	r3, #0
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 faeb 	bl	8002634 <I2C_TransferConfig>
 800205e:	e00f      	b.n	8002080 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002064:	b29a      	uxth	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206e:	b2da      	uxtb	r2, r3
 8002070:	8979      	ldrh	r1, [r7, #10]
 8002072:	2300      	movs	r3, #0
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 fada 	bl	8002634 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002084:	b29b      	uxth	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d19e      	bne.n	8001fc8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	6a39      	ldr	r1, [r7, #32]
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f9c2 	bl	8002418 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e01a      	b.n	80020d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2220      	movs	r2, #32
 80020a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_I2C_Master_Transmit+0x1e4>)
 80020b2:	400b      	ands	r3, r1
 80020b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e000      	b.n	80020d4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80020d2:	2302      	movs	r3, #2
  }
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	80002000 	.word	0x80002000
 80020e0:	fe00e800 	.word	0xfe00e800

080020e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	461a      	mov	r2, r3
 80020f0:	460b      	mov	r3, r1
 80020f2:	817b      	strh	r3, [r7, #10]
 80020f4:	4613      	mov	r3, r2
 80020f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b20      	cmp	r3, #32
 8002102:	f040 80db 	bne.w	80022bc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_I2C_Master_Receive+0x30>
 8002110:	2302      	movs	r3, #2
 8002112:	e0d4      	b.n	80022be <HAL_I2C_Master_Receive+0x1da>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800211c:	f7ff fb8a 	bl	8001834 <HAL_GetTick>
 8002120:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	2319      	movs	r3, #25
 8002128:	2201      	movs	r2, #1
 800212a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f8f2 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0bf      	b.n	80022be <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2222      	movs	r2, #34	; 0x22
 8002142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2210      	movs	r2, #16
 800214a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	893a      	ldrh	r2, [r7, #8]
 800215e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	2bff      	cmp	r3, #255	; 0xff
 800216e:	d90e      	bls.n	800218e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	22ff      	movs	r2, #255	; 0xff
 8002174:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217a:	b2da      	uxtb	r2, r3
 800217c:	8979      	ldrh	r1, [r7, #10]
 800217e:	4b52      	ldr	r3, [pc, #328]	; (80022c8 <HAL_I2C_Master_Receive+0x1e4>)
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 fa54 	bl	8002634 <I2C_TransferConfig>
 800218c:	e06d      	b.n	800226a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219c:	b2da      	uxtb	r2, r3
 800219e:	8979      	ldrh	r1, [r7, #10]
 80021a0:	4b49      	ldr	r3, [pc, #292]	; (80022c8 <HAL_I2C_Master_Receive+0x1e4>)
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fa43 	bl	8002634 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80021ae:	e05c      	b.n	800226a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	6a39      	ldr	r1, [r7, #32]
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 f96b 	bl	8002490 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e07c      	b.n	80022be <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d034      	beq.n	800226a <HAL_I2C_Master_Receive+0x186>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	2b00      	cmp	r3, #0
 8002206:	d130      	bne.n	800226a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	2200      	movs	r2, #0
 8002210:	2180      	movs	r1, #128	; 0x80
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f880 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e04d      	b.n	80022be <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	2bff      	cmp	r3, #255	; 0xff
 800222a:	d90e      	bls.n	800224a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	22ff      	movs	r2, #255	; 0xff
 8002230:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002236:	b2da      	uxtb	r2, r3
 8002238:	8979      	ldrh	r1, [r7, #10]
 800223a:	2300      	movs	r3, #0
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f9f6 	bl	8002634 <I2C_TransferConfig>
 8002248:	e00f      	b.n	800226a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002258:	b2da      	uxtb	r2, r3
 800225a:	8979      	ldrh	r1, [r7, #10]
 800225c:	2300      	movs	r3, #0
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f9e5 	bl	8002634 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d19d      	bne.n	80021b0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	6a39      	ldr	r1, [r7, #32]
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f8cd 	bl	8002418 <I2C_WaitOnSTOPFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e01a      	b.n	80022be <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2220      	movs	r2, #32
 800228e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <HAL_I2C_Master_Receive+0x1e8>)
 800229c:	400b      	ands	r3, r1
 800229e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e000      	b.n	80022be <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
  }
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	80002400 	.word	0x80002400
 80022cc:	fe00e800 	.word	0xfe00e800

080022d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d103      	bne.n	80022ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2200      	movs	r2, #0
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d007      	beq.n	800230c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	619a      	str	r2, [r3, #24]
  }
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	4613      	mov	r3, r2
 8002326:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002328:	e022      	b.n	8002370 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002330:	d01e      	beq.n	8002370 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002332:	f7ff fa7f 	bl	8001834 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d302      	bcc.n	8002348 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d113      	bne.n	8002370 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	f043 0220 	orr.w	r2, r3, #32
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e00f      	b.n	8002390 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4013      	ands	r3, r2
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	429a      	cmp	r2, r3
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	429a      	cmp	r2, r3
 800238c:	d0cd      	beq.n	800232a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023a4:	e02c      	b.n	8002400 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f8dc 	bl	8002568 <I2C_IsAcknowledgeFailed>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e02a      	b.n	8002410 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023c0:	d01e      	beq.n	8002400 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c2:	f7ff fa37 	bl	8001834 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d302      	bcc.n	80023d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d113      	bne.n	8002400 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	f043 0220 	orr.w	r2, r3, #32
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e007      	b.n	8002410 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d1cb      	bne.n	80023a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002424:	e028      	b.n	8002478 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f89c 	bl	8002568 <I2C_IsAcknowledgeFailed>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e026      	b.n	8002488 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243a:	f7ff f9fb 	bl	8001834 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	429a      	cmp	r2, r3
 8002448:	d302      	bcc.n	8002450 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d113      	bne.n	8002478 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	f043 0220 	orr.w	r2, r3, #32
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e007      	b.n	8002488 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b20      	cmp	r3, #32
 8002484:	d1cf      	bne.n	8002426 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800249c:	e055      	b.n	800254a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f860 	bl	8002568 <I2C_IsAcknowledgeFailed>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e053      	b.n	800255a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d129      	bne.n	8002514 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d105      	bne.n	80024da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e03f      	b.n	800255a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2220      	movs	r2, #32
 80024e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80024ee:	400b      	ands	r3, r1
 80024f0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e022      	b.n	800255a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002514:	f7ff f98e 	bl	8001834 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	429a      	cmp	r2, r3
 8002522:	d302      	bcc.n	800252a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10f      	bne.n	800254a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	f043 0220 	orr.w	r2, r3, #32
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e007      	b.n	800255a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b04      	cmp	r3, #4
 8002556:	d1a2      	bne.n	800249e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	fe00e800 	.word	0xfe00e800

08002568 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2b10      	cmp	r3, #16
 8002580:	d151      	bne.n	8002626 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002582:	e022      	b.n	80025ca <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800258a:	d01e      	beq.n	80025ca <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258c:	f7ff f952 	bl	8001834 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	429a      	cmp	r2, r3
 800259a:	d302      	bcc.n	80025a2 <I2C_IsAcknowledgeFailed+0x3a>
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d113      	bne.n	80025ca <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	f043 0220 	orr.w	r2, r3, #32
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e02e      	b.n	8002628 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d1d5      	bne.n	8002584 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2210      	movs	r2, #16
 80025de:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2220      	movs	r2, #32
 80025e6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f7ff fe71 	bl	80022d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <I2C_IsAcknowledgeFailed+0xc8>)
 80025fa:	400b      	ands	r3, r1
 80025fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f043 0204 	orr.w	r2, r3, #4
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	fe00e800 	.word	0xfe00e800

08002634 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	817b      	strh	r3, [r7, #10]
 8002642:	4613      	mov	r3, r2
 8002644:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	0d5b      	lsrs	r3, r3, #21
 8002650:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002654:	4b0d      	ldr	r3, [pc, #52]	; (800268c <I2C_TransferConfig+0x58>)
 8002656:	430b      	orrs	r3, r1
 8002658:	43db      	mvns	r3, r3
 800265a:	ea02 0103 	and.w	r1, r2, r3
 800265e:	897b      	ldrh	r3, [r7, #10]
 8002660:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002664:	7a7b      	ldrb	r3, [r7, #9]
 8002666:	041b      	lsls	r3, r3, #16
 8002668:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	431a      	orrs	r2, r3
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	03ff63ff 	.word	0x03ff63ff

08002690 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d138      	bne.n	8002718 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e032      	b.n	800271a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	; 0x24
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6819      	ldr	r1, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002718:	2302      	movs	r3, #2
  }
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002726:	b480      	push	{r7}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b20      	cmp	r3, #32
 800273a:	d139      	bne.n	80027b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002746:	2302      	movs	r3, #2
 8002748:	e033      	b.n	80027b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2224      	movs	r2, #36	; 0x24
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002778:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e000      	b.n	80027b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027b0:	2302      	movs	r3, #2
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40007000 	.word	0x40007000

080027dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ea:	d130      	bne.n	800284e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ec:	4b23      	ldr	r3, [pc, #140]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f8:	d038      	beq.n	800286c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002802:	4a1e      	ldr	r2, [pc, #120]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002804:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002808:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2232      	movs	r2, #50	; 0x32
 8002810:	fb02 f303 	mul.w	r3, r2, r3
 8002814:	4a1b      	ldr	r2, [pc, #108]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0c9b      	lsrs	r3, r3, #18
 800281c:	3301      	adds	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002820:	e002      	b.n	8002828 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3b01      	subs	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002834:	d102      	bne.n	800283c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f2      	bne.n	8002822 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002848:	d110      	bne.n	800286c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e00f      	b.n	800286e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800285a:	d007      	beq.n	800286c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002864:	4a05      	ldr	r2, [pc, #20]	; (800287c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800286a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40007000 	.word	0x40007000
 8002880:	20000000 	.word	0x20000000
 8002884:	431bde83 	.word	0x431bde83

08002888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e3d4      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289a:	4ba1      	ldr	r3, [pc, #644]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a4:	4b9e      	ldr	r3, [pc, #632]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80e4 	beq.w	8002a84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <HAL_RCC_OscConfig+0x4a>
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2b0c      	cmp	r3, #12
 80028c6:	f040 808b 	bne.w	80029e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	f040 8087 	bne.w	80029e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028d2:	4b93      	ldr	r3, [pc, #588]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <HAL_RCC_OscConfig+0x62>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e3ac      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1a      	ldr	r2, [r3, #32]
 80028ee:	4b8c      	ldr	r3, [pc, #560]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <HAL_RCC_OscConfig+0x7c>
 80028fa:	4b89      	ldr	r3, [pc, #548]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002902:	e005      	b.n	8002910 <HAL_RCC_OscConfig+0x88>
 8002904:	4b86      	ldr	r3, [pc, #536]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002910:	4293      	cmp	r3, r2
 8002912:	d223      	bcs.n	800295c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	4618      	mov	r0, r3
 800291a:	f000 fd3f 	bl	800339c <RCC_SetFlashLatencyFromMSIRange>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e38d      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002928:	4b7d      	ldr	r3, [pc, #500]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a7c      	ldr	r2, [pc, #496]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 800292e:	f043 0308 	orr.w	r3, r3, #8
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b7a      	ldr	r3, [pc, #488]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4977      	ldr	r1, [pc, #476]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	4972      	ldr	r1, [pc, #456]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
 800295a:	e025      	b.n	80029a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800295c:	4b70      	ldr	r3, [pc, #448]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6f      	ldr	r2, [pc, #444]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002962:	f043 0308 	orr.w	r3, r3, #8
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	496a      	ldr	r1, [pc, #424]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800297a:	4b69      	ldr	r3, [pc, #420]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	4965      	ldr	r1, [pc, #404]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d109      	bne.n	80029a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fcff 	bl	800339c <RCC_SetFlashLatencyFromMSIRange>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e34d      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029a8:	f000 fc36 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80029ac:	4601      	mov	r1, r0
 80029ae:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	4a5a      	ldr	r2, [pc, #360]	; (8002b24 <HAL_RCC_OscConfig+0x29c>)
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	fa21 f303 	lsr.w	r3, r1, r3
 80029c4:	4a58      	ldr	r2, [pc, #352]	; (8002b28 <HAL_RCC_OscConfig+0x2a0>)
 80029c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029c8:	4b58      	ldr	r3, [pc, #352]	; (8002b2c <HAL_RCC_OscConfig+0x2a4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe fee1 	bl	8001794 <HAL_InitTick>
 80029d2:	4603      	mov	r3, r0
 80029d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d052      	beq.n	8002a82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	e331      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d032      	beq.n	8002a4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029e8:	4b4d      	ldr	r3, [pc, #308]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a4c      	ldr	r2, [pc, #304]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029f4:	f7fe ff1e 	bl	8001834 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029fc:	f7fe ff1a 	bl	8001834 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e31a      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a0e:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a1a:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a40      	ldr	r2, [pc, #256]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a20:	f043 0308 	orr.w	r3, r3, #8
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	493b      	ldr	r1, [pc, #236]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a38:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	4936      	ldr	r1, [pc, #216]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
 8002a4c:	e01a      	b.n	8002a84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a4e:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a33      	ldr	r2, [pc, #204]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a5a:	f7fe feeb 	bl	8001834 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a62:	f7fe fee7 	bl	8001834 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e2e7      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a74:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x1da>
 8002a80:	e000      	b.n	8002a84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d074      	beq.n	8002b7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x21a>
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	d10e      	bne.n	8002aba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d10b      	bne.n	8002aba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d064      	beq.n	8002b78 <HAL_RCC_OscConfig+0x2f0>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d160      	bne.n	8002b78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e2c4      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x24a>
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a15      	ldr	r2, [pc, #84]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	e01d      	b.n	8002b0e <HAL_RCC_OscConfig+0x286>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ada:	d10c      	bne.n	8002af6 <HAL_RCC_OscConfig+0x26e>
 8002adc:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002ae2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	e00b      	b.n	8002b0e <HAL_RCC_OscConfig+0x286>
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a06      	ldr	r2, [pc, #24]	; (8002b20 <HAL_RCC_OscConfig+0x298>)
 8002b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d01c      	beq.n	8002b50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe fe8d 	bl	8001834 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1c:	e011      	b.n	8002b42 <HAL_RCC_OscConfig+0x2ba>
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	08005888 	.word	0x08005888
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b30:	f7fe fe80 	bl	8001834 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	; 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e280      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b42:	4baf      	ldr	r3, [pc, #700]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x2a8>
 8002b4e:	e014      	b.n	8002b7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fe70 	bl	8001834 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b58:	f7fe fe6c 	bl	8001834 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e26c      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b6a:	4ba5      	ldr	r3, [pc, #660]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x2d0>
 8002b76:	e000      	b.n	8002b7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d060      	beq.n	8002c48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_OscConfig+0x310>
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b0c      	cmp	r3, #12
 8002b90:	d119      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d116      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b98:	4b99      	ldr	r3, [pc, #612]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x328>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e249      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb0:	4b93      	ldr	r3, [pc, #588]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	4990      	ldr	r1, [pc, #576]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bc4:	e040      	b.n	8002c48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d023      	beq.n	8002c16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bce:	4b8c      	ldr	r3, [pc, #560]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a8b      	ldr	r2, [pc, #556]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bda:	f7fe fe2b 	bl	8001834 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be2:	f7fe fe27 	bl	8001834 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e227      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf4:	4b82      	ldr	r3, [pc, #520]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c00:	4b7f      	ldr	r3, [pc, #508]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	497c      	ldr	r1, [pc, #496]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
 8002c14:	e018      	b.n	8002c48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c16:	4b7a      	ldr	r3, [pc, #488]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a79      	ldr	r2, [pc, #484]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7fe fe07 	bl	8001834 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2a:	f7fe fe03 	bl	8001834 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e203      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c3c:	4b70      	ldr	r3, [pc, #448]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f0      	bne.n	8002c2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d03c      	beq.n	8002cce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01c      	beq.n	8002c96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5c:	4b68      	ldr	r3, [pc, #416]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c62:	4a67      	ldr	r2, [pc, #412]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6c:	f7fe fde2 	bl	8001834 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c74:	f7fe fdde 	bl	8001834 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e1de      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c86:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0ef      	beq.n	8002c74 <HAL_RCC_OscConfig+0x3ec>
 8002c94:	e01b      	b.n	8002cce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c96:	4b5a      	ldr	r3, [pc, #360]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9c:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca6:	f7fe fdc5 	bl	8001834 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cae:	f7fe fdc1 	bl	8001834 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e1c1      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc0:	4b4f      	ldr	r3, [pc, #316]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1ef      	bne.n	8002cae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80a6 	beq.w	8002e28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ce0:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10d      	bne.n	8002d08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cec:	4b44      	ldr	r3, [pc, #272]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	4a43      	ldr	r2, [pc, #268]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf8:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d04:	2301      	movs	r3, #1
 8002d06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d08:	4b3e      	ldr	r3, [pc, #248]	; (8002e04 <HAL_RCC_OscConfig+0x57c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d118      	bne.n	8002d46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d14:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <HAL_RCC_OscConfig+0x57c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a3a      	ldr	r2, [pc, #232]	; (8002e04 <HAL_RCC_OscConfig+0x57c>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d20:	f7fe fd88 	bl	8001834 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d28:	f7fe fd84 	bl	8001834 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e184      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d3a:	4b32      	ldr	r3, [pc, #200]	; (8002e04 <HAL_RCC_OscConfig+0x57c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d108      	bne.n	8002d60 <HAL_RCC_OscConfig+0x4d8>
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	4a2a      	ldr	r2, [pc, #168]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d5e:	e024      	b.n	8002daa <HAL_RCC_OscConfig+0x522>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d110      	bne.n	8002d8a <HAL_RCC_OscConfig+0x502>
 8002d68:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6e:	4a24      	ldr	r2, [pc, #144]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d78:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7e:	4a20      	ldr	r2, [pc, #128]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d88:	e00f      	b.n	8002daa <HAL_RCC_OscConfig+0x522>
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d90:	4a1b      	ldr	r2, [pc, #108]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da0:	4a17      	ldr	r2, [pc, #92]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002da2:	f023 0304 	bic.w	r3, r3, #4
 8002da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d016      	beq.n	8002de0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db2:	f7fe fd3f 	bl	8001834 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe fd3b 	bl	8001834 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e139      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_OscConfig+0x578>)
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0ed      	beq.n	8002dba <HAL_RCC_OscConfig+0x532>
 8002dde:	e01a      	b.n	8002e16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fe fd28 	bl	8001834 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002de6:	e00f      	b.n	8002e08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de8:	f7fe fd24 	bl	8001834 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d906      	bls.n	8002e08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e122      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e08:	4b90      	ldr	r3, [pc, #576]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e8      	bne.n	8002de8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e16:	7ffb      	ldrb	r3, [r7, #31]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d105      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1c:	4b8b      	ldr	r3, [pc, #556]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	4a8a      	ldr	r2, [pc, #552]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8108 	beq.w	8003042 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	f040 80d0 	bne.w	8002fdc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e3c:	4b83      	ldr	r3, [pc, #524]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f003 0203 	and.w	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d130      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d127      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d11f      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e7c:	2a07      	cmp	r2, #7
 8002e7e:	bf14      	ite	ne
 8002e80:	2201      	movne	r2, #1
 8002e82:	2200      	moveq	r2, #0
 8002e84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d113      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	3b01      	subs	r3, #1
 8002e98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d109      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	085b      	lsrs	r3, r3, #1
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d06e      	beq.n	8002f90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b0c      	cmp	r3, #12
 8002eb6:	d069      	beq.n	8002f8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002eb8:	4b64      	ldr	r3, [pc, #400]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d105      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ec4:	4b61      	ldr	r3, [pc, #388]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0b7      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ed4:	4b5d      	ldr	r3, [pc, #372]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a5c      	ldr	r2, [pc, #368]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ede:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ee0:	f7fe fca8 	bl	8001834 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7fe fca4 	bl	8001834 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e0a4      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002efa:	4b54      	ldr	r3, [pc, #336]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f06:	4b51      	ldr	r3, [pc, #324]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	4b51      	ldr	r3, [pc, #324]	; (8003050 <HAL_RCC_OscConfig+0x7c8>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f16:	3a01      	subs	r2, #1
 8002f18:	0112      	lsls	r2, r2, #4
 8002f1a:	4311      	orrs	r1, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f20:	0212      	lsls	r2, r2, #8
 8002f22:	4311      	orrs	r1, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f28:	0852      	lsrs	r2, r2, #1
 8002f2a:	3a01      	subs	r2, #1
 8002f2c:	0552      	lsls	r2, r2, #21
 8002f2e:	4311      	orrs	r1, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f34:	0852      	lsrs	r2, r2, #1
 8002f36:	3a01      	subs	r2, #1
 8002f38:	0652      	lsls	r2, r2, #25
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f40:	0912      	lsrs	r2, r2, #4
 8002f42:	0452      	lsls	r2, r2, #17
 8002f44:	430a      	orrs	r2, r1
 8002f46:	4941      	ldr	r1, [pc, #260]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f4c:	4b3f      	ldr	r3, [pc, #252]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3e      	ldr	r2, [pc, #248]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f58:	4b3c      	ldr	r3, [pc, #240]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4a3b      	ldr	r2, [pc, #236]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f64:	f7fe fc66 	bl	8001834 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fe fc62 	bl	8001834 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e062      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7e:	4b33      	ldr	r3, [pc, #204]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f8a:	e05a      	b.n	8003042 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e059      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f90:	4b2e      	ldr	r3, [pc, #184]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d152      	bne.n	8003042 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a2a      	ldr	r2, [pc, #168]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fa8:	4b28      	ldr	r3, [pc, #160]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4a27      	ldr	r2, [pc, #156]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fb4:	f7fe fc3e 	bl	8001834 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fe fc3a 	bl	8001834 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e03a      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fce:	4b1f      	ldr	r3, [pc, #124]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x734>
 8002fda:	e032      	b.n	8003042 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d02d      	beq.n	800303e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe2:	4b1a      	ldr	r3, [pc, #104]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a19      	ldr	r2, [pc, #100]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002fe8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002fee:	4b17      	ldr	r3, [pc, #92]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d105      	bne.n	8003006 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ffa:	4b14      	ldr	r3, [pc, #80]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	4a13      	ldr	r2, [pc, #76]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8003000:	f023 0303 	bic.w	r3, r3, #3
 8003004:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	4a10      	ldr	r2, [pc, #64]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 800300c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003014:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003016:	f7fe fc0d 	bl	8001834 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301e:	f7fe fc09 	bl	8001834 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e009      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_RCC_OscConfig+0x7c4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f0      	bne.n	800301e <HAL_RCC_OscConfig+0x796>
 800303c:	e001      	b.n	8003042 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40021000 	.word	0x40021000
 8003050:	f99d808c 	.word	0xf99d808c

08003054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0c8      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b66      	ldr	r3, [pc, #408]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d910      	bls.n	8003098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b63      	ldr	r3, [pc, #396]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 0207 	bic.w	r2, r3, #7
 800307e:	4961      	ldr	r1, [pc, #388]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b5f      	ldr	r3, [pc, #380]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0b0      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d04c      	beq.n	800313e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ac:	4b56      	ldr	r3, [pc, #344]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d121      	bne.n	80030fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e09e      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d107      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030c4:	4b50      	ldr	r3, [pc, #320]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d115      	bne.n	80030fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e092      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d107      	bne.n	80030ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030dc:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d109      	bne.n	80030fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e086      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ec:	4b46      	ldr	r3, [pc, #280]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e07e      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030fc:	4b42      	ldr	r3, [pc, #264]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 0203 	bic.w	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	493f      	ldr	r1, [pc, #252]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310e:	f7fe fb91 	bl	8001834 <HAL_GetTick>
 8003112:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003114:	e00a      	b.n	800312c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003116:	f7fe fb8d 	bl	8001834 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f241 3288 	movw	r2, #5000	; 0x1388
 8003124:	4293      	cmp	r3, r2
 8003126:	d901      	bls.n	800312c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e066      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 020c 	and.w	r2, r3, #12
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	429a      	cmp	r2, r3
 800313c:	d1eb      	bne.n	8003116 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314a:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	492c      	ldr	r1, [pc, #176]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800315c:	4b29      	ldr	r3, [pc, #164]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d210      	bcs.n	800318c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 0207 	bic.w	r2, r3, #7
 8003172:	4924      	ldr	r1, [pc, #144]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b22      	ldr	r3, [pc, #136]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e036      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4918      	ldr	r1, [pc, #96]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031b6:	4b14      	ldr	r3, [pc, #80]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4910      	ldr	r1, [pc, #64]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ca:	f000 f825 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80031ce:	4601      	mov	r1, r0
 80031d0:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	4a0c      	ldr	r2, [pc, #48]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 80031dc:	5cd3      	ldrb	r3, [r2, r3]
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	fa21 f303 	lsr.w	r3, r1, r3
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe fad0 	bl	8001794 <HAL_InitTick>
 80031f4:	4603      	mov	r3, r0
 80031f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80031f8:	7afb      	ldrb	r3, [r7, #11]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40022000 	.word	0x40022000
 8003208:	40021000 	.word	0x40021000
 800320c:	08005888 	.word	0x08005888
 8003210:	20000000 	.word	0x20000000
 8003214:	20000004 	.word	0x20000004

08003218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003226:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003230:	4b3a      	ldr	r3, [pc, #232]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x34>
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b0c      	cmp	r3, #12
 8003244:	d121      	bne.n	800328a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d11e      	bne.n	800328a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800324c:	4b33      	ldr	r3, [pc, #204]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d107      	bne.n	8003268 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003258:	4b30      	ldr	r3, [pc, #192]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 800325a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	e005      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003268:	4b2c      	ldr	r3, [pc, #176]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003274:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <HAL_RCC_GetSysClockFreq+0x108>)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10d      	bne.n	80032a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003288:	e00a      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b04      	cmp	r3, #4
 800328e:	d102      	bne.n	8003296 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003292:	61bb      	str	r3, [r7, #24]
 8003294:	e004      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800329c:	4b22      	ldr	r3, [pc, #136]	; (8003328 <HAL_RCC_GetSysClockFreq+0x110>)
 800329e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d133      	bne.n	800330e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032a6:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d002      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0xa4>
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d003      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0xaa>
 80032ba:	e005      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032bc:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032be:	617b      	str	r3, [r7, #20]
      break;
 80032c0:	e005      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032c2:	4b19      	ldr	r3, [pc, #100]	; (8003328 <HAL_RCC_GetSysClockFreq+0x110>)
 80032c4:	617b      	str	r3, [r7, #20]
      break;
 80032c6:	e002      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	617b      	str	r3, [r7, #20]
      break;
 80032cc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	3301      	adds	r3, #1
 80032da:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032dc:	4b0f      	ldr	r3, [pc, #60]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	fb02 f203 	mul.w	r2, r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	0e5b      	lsrs	r3, r3, #25
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	3301      	adds	r3, #1
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	fbb2 f3f3 	udiv	r3, r2, r3
 800330c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800330e:	69bb      	ldr	r3, [r7, #24]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3724      	adds	r7, #36	; 0x24
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40021000 	.word	0x40021000
 8003320:	080058a0 	.word	0x080058a0
 8003324:	00f42400 	.word	0x00f42400
 8003328:	007a1200 	.word	0x007a1200

0800332c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003330:	4b03      	ldr	r3, [pc, #12]	; (8003340 <HAL_RCC_GetHCLKFreq+0x14>)
 8003332:	681b      	ldr	r3, [r3, #0]
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	20000000 	.word	0x20000000

08003344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003348:	f7ff fff0 	bl	800332c <HAL_RCC_GetHCLKFreq>
 800334c:	4601      	mov	r1, r0
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4a04      	ldr	r2, [pc, #16]	; (800336c <HAL_RCC_GetPCLK1Freq+0x28>)
 800335a:	5cd3      	ldrb	r3, [r2, r3]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	08005898 	.word	0x08005898

08003370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003374:	f7ff ffda 	bl	800332c <HAL_RCC_GetHCLKFreq>
 8003378:	4601      	mov	r1, r0
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	0adb      	lsrs	r3, r3, #11
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003386:	5cd3      	ldrb	r3, [r2, r3]
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000
 8003398:	08005898 	.word	0x08005898

0800339c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033a4:	2300      	movs	r3, #0
 80033a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033a8:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033b4:	f7ff fa04 	bl	80027c0 <HAL_PWREx_GetVoltageRange>
 80033b8:	6178      	str	r0, [r7, #20]
 80033ba:	e014      	b.n	80033e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033bc:	4b25      	ldr	r3, [pc, #148]	; (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c0:	4a24      	ldr	r2, [pc, #144]	; (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c6:	6593      	str	r3, [r2, #88]	; 0x58
 80033c8:	4b22      	ldr	r3, [pc, #136]	; (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033d4:	f7ff f9f4 	bl	80027c0 <HAL_PWREx_GetVoltageRange>
 80033d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033da:	4b1e      	ldr	r3, [pc, #120]	; (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033de:	4a1d      	ldr	r2, [pc, #116]	; (8003454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ec:	d10b      	bne.n	8003406 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b80      	cmp	r3, #128	; 0x80
 80033f2:	d919      	bls.n	8003428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2ba0      	cmp	r3, #160	; 0xa0
 80033f8:	d902      	bls.n	8003400 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033fa:	2302      	movs	r3, #2
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	e013      	b.n	8003428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003400:	2301      	movs	r3, #1
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	e010      	b.n	8003428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b80      	cmp	r3, #128	; 0x80
 800340a:	d902      	bls.n	8003412 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800340c:	2303      	movs	r3, #3
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	e00a      	b.n	8003428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b80      	cmp	r3, #128	; 0x80
 8003416:	d102      	bne.n	800341e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003418:	2302      	movs	r3, #2
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	e004      	b.n	8003428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b70      	cmp	r3, #112	; 0x70
 8003422:	d101      	bne.n	8003428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003424:	2301      	movs	r3, #1
 8003426:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f023 0207 	bic.w	r2, r3, #7
 8003430:	4909      	ldr	r1, [pc, #36]	; (8003458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003438:	4b07      	ldr	r3, [pc, #28]	; (8003458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	429a      	cmp	r2, r3
 8003444:	d001      	beq.n	800344a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000
 8003458:	40022000 	.word	0x40022000

0800345c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003464:	2300      	movs	r3, #0
 8003466:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003468:	2300      	movs	r3, #0
 800346a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003474:	2b00      	cmp	r3, #0
 8003476:	d03f      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800347c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003480:	d01c      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003486:	d802      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00e      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800348c:	e01f      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x72>
 800348e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003492:	d003      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003494:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003498:	d01c      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800349a:	e018      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800349c:	4b85      	ldr	r3, [pc, #532]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4a84      	ldr	r2, [pc, #528]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034a8:	e015      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fab9 	bl	8003a28 <RCCEx_PLLSAI1_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034ba:	e00c      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3320      	adds	r3, #32
 80034c0:	2100      	movs	r1, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fba0 	bl	8003c08 <RCCEx_PLLSAI2_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034cc:	e003      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	74fb      	strb	r3, [r7, #19]
      break;
 80034d2:	e000      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80034d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d6:	7cfb      	ldrb	r3, [r7, #19]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10b      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034dc:	4b75      	ldr	r3, [pc, #468]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ea:	4972      	ldr	r1, [pc, #456]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034f2:	e001      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f4:	7cfb      	ldrb	r3, [r7, #19]
 80034f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d03f      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800350c:	d01c      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800350e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003512:	d802      	bhi.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00e      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003518:	e01f      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800351a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800351e:	d003      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003520:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003524:	d01c      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003526:	e018      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003528:	4b62      	ldr	r3, [pc, #392]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4a61      	ldr	r2, [pc, #388]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800352e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003532:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003534:	e015      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3304      	adds	r3, #4
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fa73 	bl	8003a28 <RCCEx_PLLSAI1_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003546:	e00c      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3320      	adds	r3, #32
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fb5a 	bl	8003c08 <RCCEx_PLLSAI2_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003558:	e003      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	74fb      	strb	r3, [r7, #19]
      break;
 800355e:	e000      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003560:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003562:	7cfb      	ldrb	r3, [r7, #19]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10b      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003568:	4b52      	ldr	r3, [pc, #328]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003576:	494f      	ldr	r1, [pc, #316]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800357e:	e001      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003580:	7cfb      	ldrb	r3, [r7, #19]
 8003582:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80a0 	beq.w	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003592:	2300      	movs	r3, #0
 8003594:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003596:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80035a6:	2300      	movs	r3, #0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00d      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ac:	4b41      	ldr	r3, [pc, #260]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b0:	4a40      	ldr	r2, [pc, #256]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b6:	6593      	str	r3, [r2, #88]	; 0x58
 80035b8:	4b3e      	ldr	r3, [pc, #248]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c4:	2301      	movs	r3, #1
 80035c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035c8:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a3a      	ldr	r2, [pc, #232]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80035ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035d4:	f7fe f92e 	bl	8001834 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035da:	e009      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035dc:	f7fe f92a 	bl	8001834 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d902      	bls.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	74fb      	strb	r3, [r7, #19]
        break;
 80035ee:	e005      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035f0:	4b31      	ldr	r3, [pc, #196]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0ef      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d15c      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003602:	4b2c      	ldr	r3, [pc, #176]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01f      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	429a      	cmp	r2, r3
 800361e:	d019      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003620:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800362c:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003632:	4a20      	ldr	r2, [pc, #128]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800363c:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003642:	4a1c      	ldr	r2, [pc, #112]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800364c:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d016      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fe f8e9 	bl	8001834 <HAL_GetTick>
 8003662:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003664:	e00b      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003666:	f7fe f8e5 	bl	8001834 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	f241 3288 	movw	r2, #5000	; 0x1388
 8003674:	4293      	cmp	r3, r2
 8003676:	d902      	bls.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	74fb      	strb	r3, [r7, #19]
            break;
 800367c:	e006      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0ec      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800368c:	7cfb      	ldrb	r3, [r7, #19]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003698:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a2:	4904      	ldr	r1, [pc, #16]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036aa:	e009      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036ac:	7cfb      	ldrb	r3, [r7, #19]
 80036ae:	74bb      	strb	r3, [r7, #18]
 80036b0:	e006      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036bc:	7cfb      	ldrb	r3, [r7, #19]
 80036be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036c0:	7c7b      	ldrb	r3, [r7, #17]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d105      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c6:	4b9e      	ldr	r3, [pc, #632]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ca:	4a9d      	ldr	r2, [pc, #628]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036de:	4b98      	ldr	r3, [pc, #608]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e4:	f023 0203 	bic.w	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	4994      	ldr	r1, [pc, #592]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003700:	4b8f      	ldr	r3, [pc, #572]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f023 020c 	bic.w	r2, r3, #12
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370e:	498c      	ldr	r1, [pc, #560]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003722:	4b87      	ldr	r3, [pc, #540]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003728:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	4983      	ldr	r1, [pc, #524]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003744:	4b7e      	ldr	r3, [pc, #504]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	497b      	ldr	r1, [pc, #492]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003766:	4b76      	ldr	r3, [pc, #472]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003774:	4972      	ldr	r1, [pc, #456]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003788:	4b6d      	ldr	r3, [pc, #436]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003796:	496a      	ldr	r1, [pc, #424]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037aa:	4b65      	ldr	r3, [pc, #404]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b8:	4961      	ldr	r1, [pc, #388]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037cc:	4b5c      	ldr	r3, [pc, #368]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037da:	4959      	ldr	r1, [pc, #356]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ee:	4b54      	ldr	r3, [pc, #336]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fc:	4950      	ldr	r1, [pc, #320]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003810:	4b4b      	ldr	r3, [pc, #300]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381e:	4948      	ldr	r1, [pc, #288]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003832:	4b43      	ldr	r3, [pc, #268]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003838:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	493f      	ldr	r1, [pc, #252]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d028      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003854:	4b3a      	ldr	r3, [pc, #232]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003862:	4937      	ldr	r1, [pc, #220]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800386e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003872:	d106      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003874:	4b32      	ldr	r3, [pc, #200]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4a31      	ldr	r2, [pc, #196]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800387a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800387e:	60d3      	str	r3, [r2, #12]
 8003880:	e011      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003886:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800388a:	d10c      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	2101      	movs	r1, #1
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f8c8 	bl	8003a28 <RCCEx_PLLSAI1_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800389c:	7cfb      	ldrb	r3, [r7, #19]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80038a2:	7cfb      	ldrb	r3, [r7, #19]
 80038a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d028      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038b2:	4b23      	ldr	r3, [pc, #140]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c0:	491f      	ldr	r1, [pc, #124]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038d0:	d106      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d2:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	4a1a      	ldr	r2, [pc, #104]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038dc:	60d3      	str	r3, [r2, #12]
 80038de:	e011      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038e8:	d10c      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3304      	adds	r3, #4
 80038ee:	2101      	movs	r1, #1
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 f899 	bl	8003a28 <RCCEx_PLLSAI1_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038fa:	7cfb      	ldrb	r3, [r7, #19]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003900:	7cfb      	ldrb	r3, [r7, #19]
 8003902:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d02b      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391e:	4908      	ldr	r1, [pc, #32]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800392e:	d109      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003930:	4b03      	ldr	r3, [pc, #12]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4a02      	ldr	r2, [pc, #8]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800393a:	60d3      	str	r3, [r2, #12]
 800393c:	e014      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003948:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800394c:	d10c      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	2101      	movs	r1, #1
 8003954:	4618      	mov	r0, r3
 8003956:	f000 f867 	bl	8003a28 <RCCEx_PLLSAI1_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800395e:	7cfb      	ldrb	r3, [r7, #19]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003964:	7cfb      	ldrb	r3, [r7, #19]
 8003966:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d02f      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003974:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003982:	4928      	ldr	r1, [pc, #160]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800398e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003992:	d10d      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	2102      	movs	r1, #2
 800399a:	4618      	mov	r0, r3
 800399c:	f000 f844 	bl	8003a28 <RCCEx_PLLSAI1_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d014      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80039aa:	7cfb      	ldrb	r3, [r7, #19]
 80039ac:	74bb      	strb	r3, [r7, #18]
 80039ae:	e011      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3320      	adds	r3, #32
 80039be:	2102      	movs	r1, #2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 f921 	bl	8003c08 <RCCEx_PLLSAI2_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ca:	7cfb      	ldrb	r3, [r7, #19]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80039d0:	7cfb      	ldrb	r3, [r7, #19]
 80039d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039e0:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ee:	490d      	ldr	r1, [pc, #52]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a12:	4904      	ldr	r1, [pc, #16]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a1a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000

08003a28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a36:	4b73      	ldr	r3, [pc, #460]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d018      	beq.n	8003a74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a42:	4b70      	ldr	r3, [pc, #448]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0203 	and.w	r2, r3, #3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d10d      	bne.n	8003a6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
       ||
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a5a:	4b6a      	ldr	r3, [pc, #424]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
       ||
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d044      	beq.n	8003af8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
 8003a72:	e041      	b.n	8003af8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d00c      	beq.n	8003a96 <RCCEx_PLLSAI1_Config+0x6e>
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d013      	beq.n	8003aa8 <RCCEx_PLLSAI1_Config+0x80>
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d120      	bne.n	8003ac6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a84:	4b5f      	ldr	r3, [pc, #380]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d11d      	bne.n	8003acc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a94:	e01a      	b.n	8003acc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a96:	4b5b      	ldr	r3, [pc, #364]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d116      	bne.n	8003ad0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa6:	e013      	b.n	8003ad0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aa8:	4b56      	ldr	r3, [pc, #344]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10f      	bne.n	8003ad4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ab4:	4b53      	ldr	r3, [pc, #332]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ac4:	e006      	b.n	8003ad4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	73fb      	strb	r3, [r7, #15]
      break;
 8003aca:	e004      	b.n	8003ad6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003acc:	bf00      	nop
 8003ace:	e002      	b.n	8003ad6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003ad0:	bf00      	nop
 8003ad2:	e000      	b.n	8003ad6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003ad4:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10d      	bne.n	8003af8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003adc:	4b49      	ldr	r3, [pc, #292]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6819      	ldr	r1, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	430b      	orrs	r3, r1
 8003af2:	4944      	ldr	r1, [pc, #272]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d17d      	bne.n	8003bfa <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003afe:	4b41      	ldr	r3, [pc, #260]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a40      	ldr	r2, [pc, #256]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b0a:	f7fd fe93 	bl	8001834 <HAL_GetTick>
 8003b0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b10:	e009      	b.n	8003b26 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b12:	f7fd fe8f 	bl	8001834 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d902      	bls.n	8003b26 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	73fb      	strb	r3, [r7, #15]
        break;
 8003b24:	e005      	b.n	8003b32 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b26:	4b37      	ldr	r3, [pc, #220]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1ef      	bne.n	8003b12 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d160      	bne.n	8003bfa <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d111      	bne.n	8003b62 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b3e:	4b31      	ldr	r3, [pc, #196]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6892      	ldr	r2, [r2, #8]
 8003b4e:	0211      	lsls	r1, r2, #8
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68d2      	ldr	r2, [r2, #12]
 8003b54:	0912      	lsrs	r2, r2, #4
 8003b56:	0452      	lsls	r2, r2, #17
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	492a      	ldr	r1, [pc, #168]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	610b      	str	r3, [r1, #16]
 8003b60:	e027      	b.n	8003bb2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d112      	bne.n	8003b8e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b68:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6892      	ldr	r2, [r2, #8]
 8003b78:	0211      	lsls	r1, r2, #8
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6912      	ldr	r2, [r2, #16]
 8003b7e:	0852      	lsrs	r2, r2, #1
 8003b80:	3a01      	subs	r2, #1
 8003b82:	0552      	lsls	r2, r2, #21
 8003b84:	430a      	orrs	r2, r1
 8003b86:	491f      	ldr	r1, [pc, #124]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	610b      	str	r3, [r1, #16]
 8003b8c:	e011      	b.n	8003bb2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6892      	ldr	r2, [r2, #8]
 8003b9e:	0211      	lsls	r1, r2, #8
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6952      	ldr	r2, [r2, #20]
 8003ba4:	0852      	lsrs	r2, r2, #1
 8003ba6:	3a01      	subs	r2, #1
 8003ba8:	0652      	lsls	r2, r2, #25
 8003baa:	430a      	orrs	r2, r1
 8003bac:	4915      	ldr	r1, [pc, #84]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bb2:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a13      	ldr	r2, [pc, #76]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bbc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbe:	f7fd fe39 	bl	8001834 <HAL_GetTick>
 8003bc2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bc4:	e009      	b.n	8003bda <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bc6:	f7fd fe35 	bl	8001834 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d902      	bls.n	8003bda <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	73fb      	strb	r3, [r7, #15]
          break;
 8003bd8:	e005      	b.n	8003be6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0ef      	beq.n	8003bc6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d106      	bne.n	8003bfa <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	4903      	ldr	r1, [pc, #12]	; (8003c04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000

08003c08 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c16:	4b68      	ldr	r3, [pc, #416]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d018      	beq.n	8003c54 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c22:	4b65      	ldr	r3, [pc, #404]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0203 	and.w	r2, r3, #3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d10d      	bne.n	8003c4e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
       ||
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c3a:	4b5f      	ldr	r3, [pc, #380]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
       ||
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d044      	beq.n	8003cd8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	73fb      	strb	r3, [r7, #15]
 8003c52:	e041      	b.n	8003cd8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d00c      	beq.n	8003c76 <RCCEx_PLLSAI2_Config+0x6e>
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d013      	beq.n	8003c88 <RCCEx_PLLSAI2_Config+0x80>
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d120      	bne.n	8003ca6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c64:	4b54      	ldr	r3, [pc, #336]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d11d      	bne.n	8003cac <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c74:	e01a      	b.n	8003cac <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c76:	4b50      	ldr	r3, [pc, #320]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d116      	bne.n	8003cb0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c86:	e013      	b.n	8003cb0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c88:	4b4b      	ldr	r3, [pc, #300]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c94:	4b48      	ldr	r3, [pc, #288]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d109      	bne.n	8003cb4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ca4:	e006      	b.n	8003cb4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8003caa:	e004      	b.n	8003cb6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003cac:	bf00      	nop
 8003cae:	e002      	b.n	8003cb6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003cb0:	bf00      	nop
 8003cb2:	e000      	b.n	8003cb6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003cb4:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10d      	bne.n	8003cd8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cbc:	4b3e      	ldr	r3, [pc, #248]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6819      	ldr	r1, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	4939      	ldr	r1, [pc, #228]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d167      	bne.n	8003dae <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003cde:	4b36      	ldr	r3, [pc, #216]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a35      	ldr	r2, [pc, #212]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cea:	f7fd fda3 	bl	8001834 <HAL_GetTick>
 8003cee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cf0:	e009      	b.n	8003d06 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cf2:	f7fd fd9f 	bl	8001834 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d902      	bls.n	8003d06 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	73fb      	strb	r3, [r7, #15]
        break;
 8003d04:	e005      	b.n	8003d12 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d06:	4b2c      	ldr	r3, [pc, #176]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1ef      	bne.n	8003cf2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d14a      	bne.n	8003dae <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d111      	bne.n	8003d42 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d1e:	4b26      	ldr	r3, [pc, #152]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6892      	ldr	r2, [r2, #8]
 8003d2e:	0211      	lsls	r1, r2, #8
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	68d2      	ldr	r2, [r2, #12]
 8003d34:	0912      	lsrs	r2, r2, #4
 8003d36:	0452      	lsls	r2, r2, #17
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	491f      	ldr	r1, [pc, #124]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	614b      	str	r3, [r1, #20]
 8003d40:	e011      	b.n	8003d66 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d42:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6892      	ldr	r2, [r2, #8]
 8003d52:	0211      	lsls	r1, r2, #8
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6912      	ldr	r2, [r2, #16]
 8003d58:	0852      	lsrs	r2, r2, #1
 8003d5a:	3a01      	subs	r2, #1
 8003d5c:	0652      	lsls	r2, r2, #25
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	4915      	ldr	r1, [pc, #84]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d66:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a13      	ldr	r2, [pc, #76]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d70:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d72:	f7fd fd5f 	bl	8001834 <HAL_GetTick>
 8003d76:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d78:	e009      	b.n	8003d8e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d7a:	f7fd fd5b 	bl	8001834 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d902      	bls.n	8003d8e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	73fb      	strb	r3, [r7, #15]
          break;
 8003d8c:	e005      	b.n	8003d9a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0ef      	beq.n	8003d7a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d106      	bne.n	8003dae <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003da2:	695a      	ldr	r2, [r3, #20]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	4903      	ldr	r1, [pc, #12]	; (8003db8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000

08003dbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e040      	b.n	8003e50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fd fbec 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2224      	movs	r2, #36	; 0x24
 8003de8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0201 	bic.w	r2, r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f8c0 	bl	8003f80 <UART_SetConfig>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e022      	b.n	8003e50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fb3e 	bl	8004494 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fbc5 	bl	80045d8 <UART_CheckIdleState>
 8003e4e:	4603      	mov	r3, r0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08a      	sub	sp, #40	; 0x28
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	4613      	mov	r3, r2
 8003e66:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	f040 8081 	bne.w	8003f74 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_UART_Transmit+0x26>
 8003e78:	88fb      	ldrh	r3, [r7, #6]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e079      	b.n	8003f76 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_UART_Transmit+0x38>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e072      	b.n	8003f76 <HAL_UART_Transmit+0x11e>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2221      	movs	r2, #33	; 0x21
 8003ea2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003ea4:	f7fd fcc6 	bl	8001834 <HAL_GetTick>
 8003ea8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	88fa      	ldrh	r2, [r7, #6]
 8003eae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	88fa      	ldrh	r2, [r7, #6]
 8003eb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec2:	d108      	bne.n	8003ed6 <HAL_UART_Transmit+0x7e>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d104      	bne.n	8003ed6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	e003      	b.n	8003ede <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003ee6:	e02d      	b.n	8003f44 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2180      	movs	r1, #128	; 0x80
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fbb5 	bl	8004662 <UART_WaitOnFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e039      	b.n	8003f76 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10b      	bne.n	8003f20 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	881a      	ldrh	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f14:	b292      	uxth	r2, r2
 8003f16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	e008      	b.n	8003f32 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	781a      	ldrb	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	b292      	uxth	r2, r2
 8003f2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1cb      	bne.n	8003ee8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2200      	movs	r2, #0
 8003f58:	2140      	movs	r1, #64	; 0x40
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fb81 	bl	8004662 <UART_WaitOnFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e005      	b.n	8003f76 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f80:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003f84:	b088      	sub	sp, #32
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4bac      	ldr	r3, [pc, #688]	; (8004260 <UART_SetConfig+0x2e0>)
 8003fae:	4013      	ands	r3, r2
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	69f9      	ldr	r1, [r7, #28]
 8003fb6:	430b      	orrs	r3, r1
 8003fb8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4aa2      	ldr	r2, [pc, #648]	; (8004264 <UART_SetConfig+0x2e4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d004      	beq.n	8003fea <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a99      	ldr	r2, [pc, #612]	; (8004268 <UART_SetConfig+0x2e8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d121      	bne.n	800404c <UART_SetConfig+0xcc>
 8004008:	4b98      	ldr	r3, [pc, #608]	; (800426c <UART_SetConfig+0x2ec>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b03      	cmp	r3, #3
 8004014:	d816      	bhi.n	8004044 <UART_SetConfig+0xc4>
 8004016:	a201      	add	r2, pc, #4	; (adr r2, 800401c <UART_SetConfig+0x9c>)
 8004018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401c:	0800402d 	.word	0x0800402d
 8004020:	08004039 	.word	0x08004039
 8004024:	08004033 	.word	0x08004033
 8004028:	0800403f 	.word	0x0800403f
 800402c:	2301      	movs	r3, #1
 800402e:	76fb      	strb	r3, [r7, #27]
 8004030:	e0e8      	b.n	8004204 <UART_SetConfig+0x284>
 8004032:	2302      	movs	r3, #2
 8004034:	76fb      	strb	r3, [r7, #27]
 8004036:	e0e5      	b.n	8004204 <UART_SetConfig+0x284>
 8004038:	2304      	movs	r3, #4
 800403a:	76fb      	strb	r3, [r7, #27]
 800403c:	e0e2      	b.n	8004204 <UART_SetConfig+0x284>
 800403e:	2308      	movs	r3, #8
 8004040:	76fb      	strb	r3, [r7, #27]
 8004042:	e0df      	b.n	8004204 <UART_SetConfig+0x284>
 8004044:	2310      	movs	r3, #16
 8004046:	76fb      	strb	r3, [r7, #27]
 8004048:	bf00      	nop
 800404a:	e0db      	b.n	8004204 <UART_SetConfig+0x284>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a87      	ldr	r2, [pc, #540]	; (8004270 <UART_SetConfig+0x2f0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d134      	bne.n	80040c0 <UART_SetConfig+0x140>
 8004056:	4b85      	ldr	r3, [pc, #532]	; (800426c <UART_SetConfig+0x2ec>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	f003 030c 	and.w	r3, r3, #12
 8004060:	2b0c      	cmp	r3, #12
 8004062:	d829      	bhi.n	80040b8 <UART_SetConfig+0x138>
 8004064:	a201      	add	r2, pc, #4	; (adr r2, 800406c <UART_SetConfig+0xec>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	080040a1 	.word	0x080040a1
 8004070:	080040b9 	.word	0x080040b9
 8004074:	080040b9 	.word	0x080040b9
 8004078:	080040b9 	.word	0x080040b9
 800407c:	080040ad 	.word	0x080040ad
 8004080:	080040b9 	.word	0x080040b9
 8004084:	080040b9 	.word	0x080040b9
 8004088:	080040b9 	.word	0x080040b9
 800408c:	080040a7 	.word	0x080040a7
 8004090:	080040b9 	.word	0x080040b9
 8004094:	080040b9 	.word	0x080040b9
 8004098:	080040b9 	.word	0x080040b9
 800409c:	080040b3 	.word	0x080040b3
 80040a0:	2300      	movs	r3, #0
 80040a2:	76fb      	strb	r3, [r7, #27]
 80040a4:	e0ae      	b.n	8004204 <UART_SetConfig+0x284>
 80040a6:	2302      	movs	r3, #2
 80040a8:	76fb      	strb	r3, [r7, #27]
 80040aa:	e0ab      	b.n	8004204 <UART_SetConfig+0x284>
 80040ac:	2304      	movs	r3, #4
 80040ae:	76fb      	strb	r3, [r7, #27]
 80040b0:	e0a8      	b.n	8004204 <UART_SetConfig+0x284>
 80040b2:	2308      	movs	r3, #8
 80040b4:	76fb      	strb	r3, [r7, #27]
 80040b6:	e0a5      	b.n	8004204 <UART_SetConfig+0x284>
 80040b8:	2310      	movs	r3, #16
 80040ba:	76fb      	strb	r3, [r7, #27]
 80040bc:	bf00      	nop
 80040be:	e0a1      	b.n	8004204 <UART_SetConfig+0x284>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a6b      	ldr	r2, [pc, #428]	; (8004274 <UART_SetConfig+0x2f4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d120      	bne.n	800410c <UART_SetConfig+0x18c>
 80040ca:	4b68      	ldr	r3, [pc, #416]	; (800426c <UART_SetConfig+0x2ec>)
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040d4:	2b10      	cmp	r3, #16
 80040d6:	d00f      	beq.n	80040f8 <UART_SetConfig+0x178>
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d802      	bhi.n	80040e2 <UART_SetConfig+0x162>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <UART_SetConfig+0x16c>
 80040e0:	e010      	b.n	8004104 <UART_SetConfig+0x184>
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d005      	beq.n	80040f2 <UART_SetConfig+0x172>
 80040e6:	2b30      	cmp	r3, #48	; 0x30
 80040e8:	d009      	beq.n	80040fe <UART_SetConfig+0x17e>
 80040ea:	e00b      	b.n	8004104 <UART_SetConfig+0x184>
 80040ec:	2300      	movs	r3, #0
 80040ee:	76fb      	strb	r3, [r7, #27]
 80040f0:	e088      	b.n	8004204 <UART_SetConfig+0x284>
 80040f2:	2302      	movs	r3, #2
 80040f4:	76fb      	strb	r3, [r7, #27]
 80040f6:	e085      	b.n	8004204 <UART_SetConfig+0x284>
 80040f8:	2304      	movs	r3, #4
 80040fa:	76fb      	strb	r3, [r7, #27]
 80040fc:	e082      	b.n	8004204 <UART_SetConfig+0x284>
 80040fe:	2308      	movs	r3, #8
 8004100:	76fb      	strb	r3, [r7, #27]
 8004102:	e07f      	b.n	8004204 <UART_SetConfig+0x284>
 8004104:	2310      	movs	r3, #16
 8004106:	76fb      	strb	r3, [r7, #27]
 8004108:	bf00      	nop
 800410a:	e07b      	b.n	8004204 <UART_SetConfig+0x284>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a59      	ldr	r2, [pc, #356]	; (8004278 <UART_SetConfig+0x2f8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d120      	bne.n	8004158 <UART_SetConfig+0x1d8>
 8004116:	4b55      	ldr	r3, [pc, #340]	; (800426c <UART_SetConfig+0x2ec>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004120:	2b40      	cmp	r3, #64	; 0x40
 8004122:	d00f      	beq.n	8004144 <UART_SetConfig+0x1c4>
 8004124:	2b40      	cmp	r3, #64	; 0x40
 8004126:	d802      	bhi.n	800412e <UART_SetConfig+0x1ae>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <UART_SetConfig+0x1b8>
 800412c:	e010      	b.n	8004150 <UART_SetConfig+0x1d0>
 800412e:	2b80      	cmp	r3, #128	; 0x80
 8004130:	d005      	beq.n	800413e <UART_SetConfig+0x1be>
 8004132:	2bc0      	cmp	r3, #192	; 0xc0
 8004134:	d009      	beq.n	800414a <UART_SetConfig+0x1ca>
 8004136:	e00b      	b.n	8004150 <UART_SetConfig+0x1d0>
 8004138:	2300      	movs	r3, #0
 800413a:	76fb      	strb	r3, [r7, #27]
 800413c:	e062      	b.n	8004204 <UART_SetConfig+0x284>
 800413e:	2302      	movs	r3, #2
 8004140:	76fb      	strb	r3, [r7, #27]
 8004142:	e05f      	b.n	8004204 <UART_SetConfig+0x284>
 8004144:	2304      	movs	r3, #4
 8004146:	76fb      	strb	r3, [r7, #27]
 8004148:	e05c      	b.n	8004204 <UART_SetConfig+0x284>
 800414a:	2308      	movs	r3, #8
 800414c:	76fb      	strb	r3, [r7, #27]
 800414e:	e059      	b.n	8004204 <UART_SetConfig+0x284>
 8004150:	2310      	movs	r3, #16
 8004152:	76fb      	strb	r3, [r7, #27]
 8004154:	bf00      	nop
 8004156:	e055      	b.n	8004204 <UART_SetConfig+0x284>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a47      	ldr	r2, [pc, #284]	; (800427c <UART_SetConfig+0x2fc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d124      	bne.n	80041ac <UART_SetConfig+0x22c>
 8004162:	4b42      	ldr	r3, [pc, #264]	; (800426c <UART_SetConfig+0x2ec>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004170:	d012      	beq.n	8004198 <UART_SetConfig+0x218>
 8004172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004176:	d802      	bhi.n	800417e <UART_SetConfig+0x1fe>
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <UART_SetConfig+0x20c>
 800417c:	e012      	b.n	80041a4 <UART_SetConfig+0x224>
 800417e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004182:	d006      	beq.n	8004192 <UART_SetConfig+0x212>
 8004184:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004188:	d009      	beq.n	800419e <UART_SetConfig+0x21e>
 800418a:	e00b      	b.n	80041a4 <UART_SetConfig+0x224>
 800418c:	2300      	movs	r3, #0
 800418e:	76fb      	strb	r3, [r7, #27]
 8004190:	e038      	b.n	8004204 <UART_SetConfig+0x284>
 8004192:	2302      	movs	r3, #2
 8004194:	76fb      	strb	r3, [r7, #27]
 8004196:	e035      	b.n	8004204 <UART_SetConfig+0x284>
 8004198:	2304      	movs	r3, #4
 800419a:	76fb      	strb	r3, [r7, #27]
 800419c:	e032      	b.n	8004204 <UART_SetConfig+0x284>
 800419e:	2308      	movs	r3, #8
 80041a0:	76fb      	strb	r3, [r7, #27]
 80041a2:	e02f      	b.n	8004204 <UART_SetConfig+0x284>
 80041a4:	2310      	movs	r3, #16
 80041a6:	76fb      	strb	r3, [r7, #27]
 80041a8:	bf00      	nop
 80041aa:	e02b      	b.n	8004204 <UART_SetConfig+0x284>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a2c      	ldr	r2, [pc, #176]	; (8004264 <UART_SetConfig+0x2e4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d124      	bne.n	8004200 <UART_SetConfig+0x280>
 80041b6:	4b2d      	ldr	r3, [pc, #180]	; (800426c <UART_SetConfig+0x2ec>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c4:	d012      	beq.n	80041ec <UART_SetConfig+0x26c>
 80041c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ca:	d802      	bhi.n	80041d2 <UART_SetConfig+0x252>
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <UART_SetConfig+0x260>
 80041d0:	e012      	b.n	80041f8 <UART_SetConfig+0x278>
 80041d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d6:	d006      	beq.n	80041e6 <UART_SetConfig+0x266>
 80041d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041dc:	d009      	beq.n	80041f2 <UART_SetConfig+0x272>
 80041de:	e00b      	b.n	80041f8 <UART_SetConfig+0x278>
 80041e0:	2300      	movs	r3, #0
 80041e2:	76fb      	strb	r3, [r7, #27]
 80041e4:	e00e      	b.n	8004204 <UART_SetConfig+0x284>
 80041e6:	2302      	movs	r3, #2
 80041e8:	76fb      	strb	r3, [r7, #27]
 80041ea:	e00b      	b.n	8004204 <UART_SetConfig+0x284>
 80041ec:	2304      	movs	r3, #4
 80041ee:	76fb      	strb	r3, [r7, #27]
 80041f0:	e008      	b.n	8004204 <UART_SetConfig+0x284>
 80041f2:	2308      	movs	r3, #8
 80041f4:	76fb      	strb	r3, [r7, #27]
 80041f6:	e005      	b.n	8004204 <UART_SetConfig+0x284>
 80041f8:	2310      	movs	r3, #16
 80041fa:	76fb      	strb	r3, [r7, #27]
 80041fc:	bf00      	nop
 80041fe:	e001      	b.n	8004204 <UART_SetConfig+0x284>
 8004200:	2310      	movs	r3, #16
 8004202:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a16      	ldr	r2, [pc, #88]	; (8004264 <UART_SetConfig+0x2e4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	f040 8087 	bne.w	800431e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004210:	7efb      	ldrb	r3, [r7, #27]
 8004212:	2b08      	cmp	r3, #8
 8004214:	d836      	bhi.n	8004284 <UART_SetConfig+0x304>
 8004216:	a201      	add	r2, pc, #4	; (adr r2, 800421c <UART_SetConfig+0x29c>)
 8004218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421c:	08004241 	.word	0x08004241
 8004220:	08004285 	.word	0x08004285
 8004224:	08004249 	.word	0x08004249
 8004228:	08004285 	.word	0x08004285
 800422c:	0800424f 	.word	0x0800424f
 8004230:	08004285 	.word	0x08004285
 8004234:	08004285 	.word	0x08004285
 8004238:	08004285 	.word	0x08004285
 800423c:	08004257 	.word	0x08004257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004240:	f7ff f880 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 8004244:	6178      	str	r0, [r7, #20]
        break;
 8004246:	e022      	b.n	800428e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004248:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <UART_SetConfig+0x300>)
 800424a:	617b      	str	r3, [r7, #20]
        break;
 800424c:	e01f      	b.n	800428e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424e:	f7fe ffe3 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 8004252:	6178      	str	r0, [r7, #20]
        break;
 8004254:	e01b      	b.n	800428e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425a:	617b      	str	r3, [r7, #20]
        break;
 800425c:	e017      	b.n	800428e <UART_SetConfig+0x30e>
 800425e:	bf00      	nop
 8004260:	efff69f3 	.word	0xefff69f3
 8004264:	40008000 	.word	0x40008000
 8004268:	40013800 	.word	0x40013800
 800426c:	40021000 	.word	0x40021000
 8004270:	40004400 	.word	0x40004400
 8004274:	40004800 	.word	0x40004800
 8004278:	40004c00 	.word	0x40004c00
 800427c:	40005000 	.word	0x40005000
 8004280:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	76bb      	strb	r3, [r7, #26]
        break;
 800428c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80f1 	beq.w	8004478 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	4413      	add	r3, r2
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d305      	bcc.n	80042b2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d902      	bls.n	80042b8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	76bb      	strb	r3, [r7, #26]
 80042b6:	e0df      	b.n	8004478 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	4619      	mov	r1, r3
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	f04f 0400 	mov.w	r4, #0
 80042c8:	0214      	lsls	r4, r2, #8
 80042ca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80042ce:	020b      	lsls	r3, r1, #8
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6852      	ldr	r2, [r2, #4]
 80042d4:	0852      	lsrs	r2, r2, #1
 80042d6:	4611      	mov	r1, r2
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	eb13 0b01 	adds.w	fp, r3, r1
 80042e0:	eb44 0c02 	adc.w	ip, r4, r2
 80042e4:	4658      	mov	r0, fp
 80042e6:	4661      	mov	r1, ip
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f04f 0400 	mov.w	r4, #0
 80042f0:	461a      	mov	r2, r3
 80042f2:	4623      	mov	r3, r4
 80042f4:	f7fc fbf4 	bl	8000ae0 <__aeabi_uldivmod>
 80042f8:	4603      	mov	r3, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004304:	d308      	bcc.n	8004318 <UART_SetConfig+0x398>
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800430c:	d204      	bcs.n	8004318 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	60da      	str	r2, [r3, #12]
 8004316:	e0af      	b.n	8004478 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	76bb      	strb	r3, [r7, #26]
 800431c:	e0ac      	b.n	8004478 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004326:	d15b      	bne.n	80043e0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004328:	7efb      	ldrb	r3, [r7, #27]
 800432a:	2b08      	cmp	r3, #8
 800432c:	d827      	bhi.n	800437e <UART_SetConfig+0x3fe>
 800432e:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <UART_SetConfig+0x3b4>)
 8004330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004334:	08004359 	.word	0x08004359
 8004338:	08004361 	.word	0x08004361
 800433c:	08004369 	.word	0x08004369
 8004340:	0800437f 	.word	0x0800437f
 8004344:	0800436f 	.word	0x0800436f
 8004348:	0800437f 	.word	0x0800437f
 800434c:	0800437f 	.word	0x0800437f
 8004350:	0800437f 	.word	0x0800437f
 8004354:	08004377 	.word	0x08004377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004358:	f7fe fff4 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 800435c:	6178      	str	r0, [r7, #20]
        break;
 800435e:	e013      	b.n	8004388 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004360:	f7ff f806 	bl	8003370 <HAL_RCC_GetPCLK2Freq>
 8004364:	6178      	str	r0, [r7, #20]
        break;
 8004366:	e00f      	b.n	8004388 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004368:	4b49      	ldr	r3, [pc, #292]	; (8004490 <UART_SetConfig+0x510>)
 800436a:	617b      	str	r3, [r7, #20]
        break;
 800436c:	e00c      	b.n	8004388 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800436e:	f7fe ff53 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 8004372:	6178      	str	r0, [r7, #20]
        break;
 8004374:	e008      	b.n	8004388 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800437a:	617b      	str	r3, [r7, #20]
        break;
 800437c:	e004      	b.n	8004388 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	76bb      	strb	r3, [r7, #26]
        break;
 8004386:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d074      	beq.n	8004478 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	005a      	lsls	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	085b      	lsrs	r3, r3, #1
 8004398:	441a      	add	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b0f      	cmp	r3, #15
 80043aa:	d916      	bls.n	80043da <UART_SetConfig+0x45a>
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b2:	d212      	bcs.n	80043da <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	f023 030f 	bic.w	r3, r3, #15
 80043bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	085b      	lsrs	r3, r3, #1
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	89fb      	ldrh	r3, [r7, #14]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	89fa      	ldrh	r2, [r7, #14]
 80043d6:	60da      	str	r2, [r3, #12]
 80043d8:	e04e      	b.n	8004478 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	76bb      	strb	r3, [r7, #26]
 80043de:	e04b      	b.n	8004478 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043e0:	7efb      	ldrb	r3, [r7, #27]
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d827      	bhi.n	8004436 <UART_SetConfig+0x4b6>
 80043e6:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <UART_SetConfig+0x46c>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	08004411 	.word	0x08004411
 80043f0:	08004419 	.word	0x08004419
 80043f4:	08004421 	.word	0x08004421
 80043f8:	08004437 	.word	0x08004437
 80043fc:	08004427 	.word	0x08004427
 8004400:	08004437 	.word	0x08004437
 8004404:	08004437 	.word	0x08004437
 8004408:	08004437 	.word	0x08004437
 800440c:	0800442f 	.word	0x0800442f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004410:	f7fe ff98 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 8004414:	6178      	str	r0, [r7, #20]
        break;
 8004416:	e013      	b.n	8004440 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004418:	f7fe ffaa 	bl	8003370 <HAL_RCC_GetPCLK2Freq>
 800441c:	6178      	str	r0, [r7, #20]
        break;
 800441e:	e00f      	b.n	8004440 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004420:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <UART_SetConfig+0x510>)
 8004422:	617b      	str	r3, [r7, #20]
        break;
 8004424:	e00c      	b.n	8004440 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004426:	f7fe fef7 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 800442a:	6178      	str	r0, [r7, #20]
        break;
 800442c:	e008      	b.n	8004440 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800442e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004432:	617b      	str	r3, [r7, #20]
        break;
 8004434:	e004      	b.n	8004440 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	76bb      	strb	r3, [r7, #26]
        break;
 800443e:	bf00      	nop
    }

    if (pclk != 0U)
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d018      	beq.n	8004478 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	085a      	lsrs	r2, r3, #1
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	441a      	add	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	fbb2 f3f3 	udiv	r3, r2, r3
 8004458:	b29b      	uxth	r3, r3
 800445a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b0f      	cmp	r3, #15
 8004460:	d908      	bls.n	8004474 <UART_SetConfig+0x4f4>
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d204      	bcs.n	8004474 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	60da      	str	r2, [r3, #12]
 8004472:	e001      	b.n	8004478 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004484:	7ebb      	ldrb	r3, [r7, #26]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3720      	adds	r7, #32
 800448a:	46bd      	mov	sp, r7
 800448c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004490:	00f42400 	.word	0x00f42400

08004494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	f003 0310 	and.w	r3, r3, #16
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01a      	beq.n	80045aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004592:	d10a      	bne.n	80045aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	605a      	str	r2, [r3, #4]
  }
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af02      	add	r7, sp, #8
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80045e6:	f7fd f925 	bl	8001834 <HAL_GetTick>
 80045ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d10e      	bne.n	8004618 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f82a 	bl	8004662 <UART_WaitOnFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e020      	b.n	800465a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b04      	cmp	r3, #4
 8004624:	d10e      	bne.n	8004644 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004626:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f814 	bl	8004662 <UART_WaitOnFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e00a      	b.n	800465a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	603b      	str	r3, [r7, #0]
 800466e:	4613      	mov	r3, r2
 8004670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004672:	e05d      	b.n	8004730 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800467a:	d059      	beq.n	8004730 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467c:	f7fd f8da 	bl	8001834 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	429a      	cmp	r2, r3
 800468a:	d302      	bcc.n	8004692 <UART_WaitOnFlagUntilTimeout+0x30>
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d11b      	bne.n	80046ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046a0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e042      	b.n	8004750 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d02b      	beq.n	8004730 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e6:	d123      	bne.n	8004730 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004700:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0201 	bic.w	r2, r2, #1
 8004710:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2220      	movs	r2, #32
 8004722:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e00f      	b.n	8004750 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69da      	ldr	r2, [r3, #28]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	4013      	ands	r3, r2
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	429a      	cmp	r2, r3
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	429a      	cmp	r2, r3
 800474c:	d092      	beq.n	8004674 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <__errno>:
 8004758:	4b01      	ldr	r3, [pc, #4]	; (8004760 <__errno+0x8>)
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	2000000c 	.word	0x2000000c

08004764 <__libc_init_array>:
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	4e0d      	ldr	r6, [pc, #52]	; (800479c <__libc_init_array+0x38>)
 8004768:	4c0d      	ldr	r4, [pc, #52]	; (80047a0 <__libc_init_array+0x3c>)
 800476a:	1ba4      	subs	r4, r4, r6
 800476c:	10a4      	asrs	r4, r4, #2
 800476e:	2500      	movs	r5, #0
 8004770:	42a5      	cmp	r5, r4
 8004772:	d109      	bne.n	8004788 <__libc_init_array+0x24>
 8004774:	4e0b      	ldr	r6, [pc, #44]	; (80047a4 <__libc_init_array+0x40>)
 8004776:	4c0c      	ldr	r4, [pc, #48]	; (80047a8 <__libc_init_array+0x44>)
 8004778:	f001 f878 	bl	800586c <_init>
 800477c:	1ba4      	subs	r4, r4, r6
 800477e:	10a4      	asrs	r4, r4, #2
 8004780:	2500      	movs	r5, #0
 8004782:	42a5      	cmp	r5, r4
 8004784:	d105      	bne.n	8004792 <__libc_init_array+0x2e>
 8004786:	bd70      	pop	{r4, r5, r6, pc}
 8004788:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800478c:	4798      	blx	r3
 800478e:	3501      	adds	r5, #1
 8004790:	e7ee      	b.n	8004770 <__libc_init_array+0xc>
 8004792:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004796:	4798      	blx	r3
 8004798:	3501      	adds	r5, #1
 800479a:	e7f2      	b.n	8004782 <__libc_init_array+0x1e>
 800479c:	08005920 	.word	0x08005920
 80047a0:	08005920 	.word	0x08005920
 80047a4:	08005920 	.word	0x08005920
 80047a8:	08005924 	.word	0x08005924

080047ac <memset>:
 80047ac:	4402      	add	r2, r0
 80047ae:	4603      	mov	r3, r0
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d100      	bne.n	80047b6 <memset+0xa>
 80047b4:	4770      	bx	lr
 80047b6:	f803 1b01 	strb.w	r1, [r3], #1
 80047ba:	e7f9      	b.n	80047b0 <memset+0x4>

080047bc <pow>:
 80047bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c0:	ed2d 8b04 	vpush	{d8-d9}
 80047c4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8004a98 <pow+0x2dc>
 80047c8:	b08d      	sub	sp, #52	; 0x34
 80047ca:	ec57 6b10 	vmov	r6, r7, d0
 80047ce:	ec55 4b11 	vmov	r4, r5, d1
 80047d2:	f000 f965 	bl	8004aa0 <__ieee754_pow>
 80047d6:	f999 3000 	ldrsb.w	r3, [r9]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	eeb0 8a40 	vmov.f32	s16, s0
 80047e2:	eef0 8a60 	vmov.f32	s17, s1
 80047e6:	46c8      	mov	r8, r9
 80047e8:	d05f      	beq.n	80048aa <pow+0xee>
 80047ea:	4622      	mov	r2, r4
 80047ec:	462b      	mov	r3, r5
 80047ee:	4620      	mov	r0, r4
 80047f0:	4629      	mov	r1, r5
 80047f2:	f7fc f93f 	bl	8000a74 <__aeabi_dcmpun>
 80047f6:	4683      	mov	fp, r0
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d156      	bne.n	80048aa <pow+0xee>
 80047fc:	4632      	mov	r2, r6
 80047fe:	463b      	mov	r3, r7
 8004800:	4630      	mov	r0, r6
 8004802:	4639      	mov	r1, r7
 8004804:	f7fc f936 	bl	8000a74 <__aeabi_dcmpun>
 8004808:	9001      	str	r0, [sp, #4]
 800480a:	b1e8      	cbz	r0, 8004848 <pow+0x8c>
 800480c:	2200      	movs	r2, #0
 800480e:	2300      	movs	r3, #0
 8004810:	4620      	mov	r0, r4
 8004812:	4629      	mov	r1, r5
 8004814:	f7fc f8fc 	bl	8000a10 <__aeabi_dcmpeq>
 8004818:	2800      	cmp	r0, #0
 800481a:	d046      	beq.n	80048aa <pow+0xee>
 800481c:	2301      	movs	r3, #1
 800481e:	9302      	str	r3, [sp, #8]
 8004820:	4b96      	ldr	r3, [pc, #600]	; (8004a7c <pow+0x2c0>)
 8004822:	9303      	str	r3, [sp, #12]
 8004824:	4b96      	ldr	r3, [pc, #600]	; (8004a80 <pow+0x2c4>)
 8004826:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800482a:	2200      	movs	r2, #0
 800482c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004830:	9b00      	ldr	r3, [sp, #0]
 8004832:	2b02      	cmp	r3, #2
 8004834:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004838:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800483c:	d033      	beq.n	80048a6 <pow+0xea>
 800483e:	a802      	add	r0, sp, #8
 8004840:	f000 fefd 	bl	800563e <matherr>
 8004844:	bb48      	cbnz	r0, 800489a <pow+0xde>
 8004846:	e05d      	b.n	8004904 <pow+0x148>
 8004848:	f04f 0a00 	mov.w	sl, #0
 800484c:	f04f 0b00 	mov.w	fp, #0
 8004850:	4652      	mov	r2, sl
 8004852:	465b      	mov	r3, fp
 8004854:	4630      	mov	r0, r6
 8004856:	4639      	mov	r1, r7
 8004858:	f7fc f8da 	bl	8000a10 <__aeabi_dcmpeq>
 800485c:	ec4b ab19 	vmov	d9, sl, fp
 8004860:	2800      	cmp	r0, #0
 8004862:	d054      	beq.n	800490e <pow+0x152>
 8004864:	4652      	mov	r2, sl
 8004866:	465b      	mov	r3, fp
 8004868:	4620      	mov	r0, r4
 800486a:	4629      	mov	r1, r5
 800486c:	f7fc f8d0 	bl	8000a10 <__aeabi_dcmpeq>
 8004870:	4680      	mov	r8, r0
 8004872:	b318      	cbz	r0, 80048bc <pow+0x100>
 8004874:	2301      	movs	r3, #1
 8004876:	9302      	str	r3, [sp, #8]
 8004878:	4b80      	ldr	r3, [pc, #512]	; (8004a7c <pow+0x2c0>)
 800487a:	9303      	str	r3, [sp, #12]
 800487c:	9b01      	ldr	r3, [sp, #4]
 800487e:	930a      	str	r3, [sp, #40]	; 0x28
 8004880:	9b00      	ldr	r3, [sp, #0]
 8004882:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004886:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800488a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0d5      	beq.n	800483e <pow+0x82>
 8004892:	4b7b      	ldr	r3, [pc, #492]	; (8004a80 <pow+0x2c4>)
 8004894:	2200      	movs	r2, #0
 8004896:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800489a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800489c:	b11b      	cbz	r3, 80048a6 <pow+0xea>
 800489e:	f7ff ff5b 	bl	8004758 <__errno>
 80048a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048a4:	6003      	str	r3, [r0, #0]
 80048a6:	ed9d 8b08 	vldr	d8, [sp, #32]
 80048aa:	eeb0 0a48 	vmov.f32	s0, s16
 80048ae:	eef0 0a68 	vmov.f32	s1, s17
 80048b2:	b00d      	add	sp, #52	; 0x34
 80048b4:	ecbd 8b04 	vpop	{d8-d9}
 80048b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048bc:	ec45 4b10 	vmov	d0, r4, r5
 80048c0:	f000 feb5 	bl	800562e <finite>
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d0f0      	beq.n	80048aa <pow+0xee>
 80048c8:	4652      	mov	r2, sl
 80048ca:	465b      	mov	r3, fp
 80048cc:	4620      	mov	r0, r4
 80048ce:	4629      	mov	r1, r5
 80048d0:	f7fc f8a8 	bl	8000a24 <__aeabi_dcmplt>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d0e8      	beq.n	80048aa <pow+0xee>
 80048d8:	2301      	movs	r3, #1
 80048da:	9302      	str	r3, [sp, #8]
 80048dc:	4b67      	ldr	r3, [pc, #412]	; (8004a7c <pow+0x2c0>)
 80048de:	9303      	str	r3, [sp, #12]
 80048e0:	f999 3000 	ldrsb.w	r3, [r9]
 80048e4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80048e8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80048ec:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80048f0:	b913      	cbnz	r3, 80048f8 <pow+0x13c>
 80048f2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80048f6:	e7a2      	b.n	800483e <pow+0x82>
 80048f8:	4962      	ldr	r1, [pc, #392]	; (8004a84 <pow+0x2c8>)
 80048fa:	2000      	movs	r0, #0
 80048fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d19c      	bne.n	800483e <pow+0x82>
 8004904:	f7ff ff28 	bl	8004758 <__errno>
 8004908:	2321      	movs	r3, #33	; 0x21
 800490a:	6003      	str	r3, [r0, #0]
 800490c:	e7c5      	b.n	800489a <pow+0xde>
 800490e:	eeb0 0a48 	vmov.f32	s0, s16
 8004912:	eef0 0a68 	vmov.f32	s1, s17
 8004916:	f000 fe8a 	bl	800562e <finite>
 800491a:	9000      	str	r0, [sp, #0]
 800491c:	2800      	cmp	r0, #0
 800491e:	f040 8081 	bne.w	8004a24 <pow+0x268>
 8004922:	ec47 6b10 	vmov	d0, r6, r7
 8004926:	f000 fe82 	bl	800562e <finite>
 800492a:	2800      	cmp	r0, #0
 800492c:	d07a      	beq.n	8004a24 <pow+0x268>
 800492e:	ec45 4b10 	vmov	d0, r4, r5
 8004932:	f000 fe7c 	bl	800562e <finite>
 8004936:	2800      	cmp	r0, #0
 8004938:	d074      	beq.n	8004a24 <pow+0x268>
 800493a:	ec53 2b18 	vmov	r2, r3, d8
 800493e:	ee18 0a10 	vmov	r0, s16
 8004942:	4619      	mov	r1, r3
 8004944:	f7fc f896 	bl	8000a74 <__aeabi_dcmpun>
 8004948:	f999 9000 	ldrsb.w	r9, [r9]
 800494c:	4b4b      	ldr	r3, [pc, #300]	; (8004a7c <pow+0x2c0>)
 800494e:	b1b0      	cbz	r0, 800497e <pow+0x1c2>
 8004950:	2201      	movs	r2, #1
 8004952:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004956:	9b00      	ldr	r3, [sp, #0]
 8004958:	930a      	str	r3, [sp, #40]	; 0x28
 800495a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800495e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004962:	f1b9 0f00 	cmp.w	r9, #0
 8004966:	d0c4      	beq.n	80048f2 <pow+0x136>
 8004968:	4652      	mov	r2, sl
 800496a:	465b      	mov	r3, fp
 800496c:	4650      	mov	r0, sl
 800496e:	4659      	mov	r1, fp
 8004970:	f7fb ff10 	bl	8000794 <__aeabi_ddiv>
 8004974:	f1b9 0f02 	cmp.w	r9, #2
 8004978:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800497c:	e7c1      	b.n	8004902 <pow+0x146>
 800497e:	2203      	movs	r2, #3
 8004980:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004984:	900a      	str	r0, [sp, #40]	; 0x28
 8004986:	4629      	mov	r1, r5
 8004988:	4620      	mov	r0, r4
 800498a:	2200      	movs	r2, #0
 800498c:	4b3e      	ldr	r3, [pc, #248]	; (8004a88 <pow+0x2cc>)
 800498e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004992:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004996:	f7fb fdd3 	bl	8000540 <__aeabi_dmul>
 800499a:	4604      	mov	r4, r0
 800499c:	460d      	mov	r5, r1
 800499e:	f1b9 0f00 	cmp.w	r9, #0
 80049a2:	d124      	bne.n	80049ee <pow+0x232>
 80049a4:	4b39      	ldr	r3, [pc, #228]	; (8004a8c <pow+0x2d0>)
 80049a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80049aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80049ae:	4630      	mov	r0, r6
 80049b0:	4652      	mov	r2, sl
 80049b2:	465b      	mov	r3, fp
 80049b4:	4639      	mov	r1, r7
 80049b6:	f7fc f835 	bl	8000a24 <__aeabi_dcmplt>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d056      	beq.n	8004a6c <pow+0x2b0>
 80049be:	ec45 4b10 	vmov	d0, r4, r5
 80049c2:	f000 fe49 	bl	8005658 <rint>
 80049c6:	4622      	mov	r2, r4
 80049c8:	462b      	mov	r3, r5
 80049ca:	ec51 0b10 	vmov	r0, r1, d0
 80049ce:	f7fc f81f 	bl	8000a10 <__aeabi_dcmpeq>
 80049d2:	b920      	cbnz	r0, 80049de <pow+0x222>
 80049d4:	4b2e      	ldr	r3, [pc, #184]	; (8004a90 <pow+0x2d4>)
 80049d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80049da:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80049de:	f998 3000 	ldrsb.w	r3, [r8]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d142      	bne.n	8004a6c <pow+0x2b0>
 80049e6:	f7ff feb7 	bl	8004758 <__errno>
 80049ea:	2322      	movs	r3, #34	; 0x22
 80049ec:	e78d      	b.n	800490a <pow+0x14e>
 80049ee:	4b29      	ldr	r3, [pc, #164]	; (8004a94 <pow+0x2d8>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80049f6:	4630      	mov	r0, r6
 80049f8:	4652      	mov	r2, sl
 80049fa:	465b      	mov	r3, fp
 80049fc:	4639      	mov	r1, r7
 80049fe:	f7fc f811 	bl	8000a24 <__aeabi_dcmplt>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	d0eb      	beq.n	80049de <pow+0x222>
 8004a06:	ec45 4b10 	vmov	d0, r4, r5
 8004a0a:	f000 fe25 	bl	8005658 <rint>
 8004a0e:	4622      	mov	r2, r4
 8004a10:	462b      	mov	r3, r5
 8004a12:	ec51 0b10 	vmov	r0, r1, d0
 8004a16:	f7fb fffb 	bl	8000a10 <__aeabi_dcmpeq>
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	d1df      	bne.n	80049de <pow+0x222>
 8004a1e:	2200      	movs	r2, #0
 8004a20:	4b18      	ldr	r3, [pc, #96]	; (8004a84 <pow+0x2c8>)
 8004a22:	e7da      	b.n	80049da <pow+0x21e>
 8004a24:	2200      	movs	r2, #0
 8004a26:	2300      	movs	r3, #0
 8004a28:	ec51 0b18 	vmov	r0, r1, d8
 8004a2c:	f7fb fff0 	bl	8000a10 <__aeabi_dcmpeq>
 8004a30:	2800      	cmp	r0, #0
 8004a32:	f43f af3a 	beq.w	80048aa <pow+0xee>
 8004a36:	ec47 6b10 	vmov	d0, r6, r7
 8004a3a:	f000 fdf8 	bl	800562e <finite>
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	f43f af33 	beq.w	80048aa <pow+0xee>
 8004a44:	ec45 4b10 	vmov	d0, r4, r5
 8004a48:	f000 fdf1 	bl	800562e <finite>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	f43f af2c 	beq.w	80048aa <pow+0xee>
 8004a52:	2304      	movs	r3, #4
 8004a54:	9302      	str	r3, [sp, #8]
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <pow+0x2c0>)
 8004a58:	9303      	str	r3, [sp, #12]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	930a      	str	r3, [sp, #40]	; 0x28
 8004a5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a62:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004a66:	ed8d 9b08 	vstr	d9, [sp, #32]
 8004a6a:	e7b8      	b.n	80049de <pow+0x222>
 8004a6c:	a802      	add	r0, sp, #8
 8004a6e:	f000 fde6 	bl	800563e <matherr>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	f47f af11 	bne.w	800489a <pow+0xde>
 8004a78:	e7b5      	b.n	80049e6 <pow+0x22a>
 8004a7a:	bf00      	nop
 8004a7c:	080058d0 	.word	0x080058d0
 8004a80:	3ff00000 	.word	0x3ff00000
 8004a84:	fff00000 	.word	0xfff00000
 8004a88:	3fe00000 	.word	0x3fe00000
 8004a8c:	47efffff 	.word	0x47efffff
 8004a90:	c7efffff 	.word	0xc7efffff
 8004a94:	7ff00000 	.word	0x7ff00000
 8004a98:	20000070 	.word	0x20000070
 8004a9c:	00000000 	.word	0x00000000

08004aa0 <__ieee754_pow>:
 8004aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa4:	b091      	sub	sp, #68	; 0x44
 8004aa6:	ed8d 1b00 	vstr	d1, [sp]
 8004aaa:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004aae:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004ab2:	ea58 0302 	orrs.w	r3, r8, r2
 8004ab6:	ec57 6b10 	vmov	r6, r7, d0
 8004aba:	f000 84be 	beq.w	800543a <__ieee754_pow+0x99a>
 8004abe:	4b7a      	ldr	r3, [pc, #488]	; (8004ca8 <__ieee754_pow+0x208>)
 8004ac0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004ac4:	429c      	cmp	r4, r3
 8004ac6:	463d      	mov	r5, r7
 8004ac8:	ee10 aa10 	vmov	sl, s0
 8004acc:	dc09      	bgt.n	8004ae2 <__ieee754_pow+0x42>
 8004ace:	d103      	bne.n	8004ad8 <__ieee754_pow+0x38>
 8004ad0:	b93e      	cbnz	r6, 8004ae2 <__ieee754_pow+0x42>
 8004ad2:	45a0      	cmp	r8, r4
 8004ad4:	dc0d      	bgt.n	8004af2 <__ieee754_pow+0x52>
 8004ad6:	e001      	b.n	8004adc <__ieee754_pow+0x3c>
 8004ad8:	4598      	cmp	r8, r3
 8004ada:	dc02      	bgt.n	8004ae2 <__ieee754_pow+0x42>
 8004adc:	4598      	cmp	r8, r3
 8004ade:	d10e      	bne.n	8004afe <__ieee754_pow+0x5e>
 8004ae0:	b16a      	cbz	r2, 8004afe <__ieee754_pow+0x5e>
 8004ae2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004ae6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004aea:	ea54 030a 	orrs.w	r3, r4, sl
 8004aee:	f000 84a4 	beq.w	800543a <__ieee754_pow+0x99a>
 8004af2:	486e      	ldr	r0, [pc, #440]	; (8004cac <__ieee754_pow+0x20c>)
 8004af4:	b011      	add	sp, #68	; 0x44
 8004af6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afa:	f000 bda5 	b.w	8005648 <nan>
 8004afe:	2d00      	cmp	r5, #0
 8004b00:	da53      	bge.n	8004baa <__ieee754_pow+0x10a>
 8004b02:	4b6b      	ldr	r3, [pc, #428]	; (8004cb0 <__ieee754_pow+0x210>)
 8004b04:	4598      	cmp	r8, r3
 8004b06:	dc4d      	bgt.n	8004ba4 <__ieee754_pow+0x104>
 8004b08:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004b0c:	4598      	cmp	r8, r3
 8004b0e:	dd4c      	ble.n	8004baa <__ieee754_pow+0x10a>
 8004b10:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004b14:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004b18:	2b14      	cmp	r3, #20
 8004b1a:	dd26      	ble.n	8004b6a <__ieee754_pow+0xca>
 8004b1c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004b20:	fa22 f103 	lsr.w	r1, r2, r3
 8004b24:	fa01 f303 	lsl.w	r3, r1, r3
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d13e      	bne.n	8004baa <__ieee754_pow+0x10a>
 8004b2c:	f001 0101 	and.w	r1, r1, #1
 8004b30:	f1c1 0b02 	rsb	fp, r1, #2
 8004b34:	2a00      	cmp	r2, #0
 8004b36:	d15b      	bne.n	8004bf0 <__ieee754_pow+0x150>
 8004b38:	4b5b      	ldr	r3, [pc, #364]	; (8004ca8 <__ieee754_pow+0x208>)
 8004b3a:	4598      	cmp	r8, r3
 8004b3c:	d124      	bne.n	8004b88 <__ieee754_pow+0xe8>
 8004b3e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004b42:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004b46:	ea53 030a 	orrs.w	r3, r3, sl
 8004b4a:	f000 8476 	beq.w	800543a <__ieee754_pow+0x99a>
 8004b4e:	4b59      	ldr	r3, [pc, #356]	; (8004cb4 <__ieee754_pow+0x214>)
 8004b50:	429c      	cmp	r4, r3
 8004b52:	dd2d      	ble.n	8004bb0 <__ieee754_pow+0x110>
 8004b54:	f1b9 0f00 	cmp.w	r9, #0
 8004b58:	f280 8473 	bge.w	8005442 <__ieee754_pow+0x9a2>
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	2100      	movs	r1, #0
 8004b60:	ec41 0b10 	vmov	d0, r0, r1
 8004b64:	b011      	add	sp, #68	; 0x44
 8004b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6a:	2a00      	cmp	r2, #0
 8004b6c:	d13e      	bne.n	8004bec <__ieee754_pow+0x14c>
 8004b6e:	f1c3 0314 	rsb	r3, r3, #20
 8004b72:	fa48 f103 	asr.w	r1, r8, r3
 8004b76:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7a:	4543      	cmp	r3, r8
 8004b7c:	f040 8469 	bne.w	8005452 <__ieee754_pow+0x9b2>
 8004b80:	f001 0101 	and.w	r1, r1, #1
 8004b84:	f1c1 0b02 	rsb	fp, r1, #2
 8004b88:	4b4b      	ldr	r3, [pc, #300]	; (8004cb8 <__ieee754_pow+0x218>)
 8004b8a:	4598      	cmp	r8, r3
 8004b8c:	d118      	bne.n	8004bc0 <__ieee754_pow+0x120>
 8004b8e:	f1b9 0f00 	cmp.w	r9, #0
 8004b92:	f280 845a 	bge.w	800544a <__ieee754_pow+0x9aa>
 8004b96:	4948      	ldr	r1, [pc, #288]	; (8004cb8 <__ieee754_pow+0x218>)
 8004b98:	4632      	mov	r2, r6
 8004b9a:	463b      	mov	r3, r7
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	f7fb fdf9 	bl	8000794 <__aeabi_ddiv>
 8004ba2:	e7dd      	b.n	8004b60 <__ieee754_pow+0xc0>
 8004ba4:	f04f 0b02 	mov.w	fp, #2
 8004ba8:	e7c4      	b.n	8004b34 <__ieee754_pow+0x94>
 8004baa:	f04f 0b00 	mov.w	fp, #0
 8004bae:	e7c1      	b.n	8004b34 <__ieee754_pow+0x94>
 8004bb0:	f1b9 0f00 	cmp.w	r9, #0
 8004bb4:	dad2      	bge.n	8004b5c <__ieee754_pow+0xbc>
 8004bb6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004bba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004bbe:	e7cf      	b.n	8004b60 <__ieee754_pow+0xc0>
 8004bc0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004bc4:	d106      	bne.n	8004bd4 <__ieee754_pow+0x134>
 8004bc6:	4632      	mov	r2, r6
 8004bc8:	463b      	mov	r3, r7
 8004bca:	4610      	mov	r0, r2
 8004bcc:	4619      	mov	r1, r3
 8004bce:	f7fb fcb7 	bl	8000540 <__aeabi_dmul>
 8004bd2:	e7c5      	b.n	8004b60 <__ieee754_pow+0xc0>
 8004bd4:	4b39      	ldr	r3, [pc, #228]	; (8004cbc <__ieee754_pow+0x21c>)
 8004bd6:	4599      	cmp	r9, r3
 8004bd8:	d10a      	bne.n	8004bf0 <__ieee754_pow+0x150>
 8004bda:	2d00      	cmp	r5, #0
 8004bdc:	db08      	blt.n	8004bf0 <__ieee754_pow+0x150>
 8004bde:	ec47 6b10 	vmov	d0, r6, r7
 8004be2:	b011      	add	sp, #68	; 0x44
 8004be4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be8:	f000 bc68 	b.w	80054bc <__ieee754_sqrt>
 8004bec:	f04f 0b00 	mov.w	fp, #0
 8004bf0:	ec47 6b10 	vmov	d0, r6, r7
 8004bf4:	f000 fd12 	bl	800561c <fabs>
 8004bf8:	ec51 0b10 	vmov	r0, r1, d0
 8004bfc:	f1ba 0f00 	cmp.w	sl, #0
 8004c00:	d127      	bne.n	8004c52 <__ieee754_pow+0x1b2>
 8004c02:	b124      	cbz	r4, 8004c0e <__ieee754_pow+0x16e>
 8004c04:	4b2c      	ldr	r3, [pc, #176]	; (8004cb8 <__ieee754_pow+0x218>)
 8004c06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d121      	bne.n	8004c52 <__ieee754_pow+0x1b2>
 8004c0e:	f1b9 0f00 	cmp.w	r9, #0
 8004c12:	da05      	bge.n	8004c20 <__ieee754_pow+0x180>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	2000      	movs	r0, #0
 8004c1a:	4927      	ldr	r1, [pc, #156]	; (8004cb8 <__ieee754_pow+0x218>)
 8004c1c:	f7fb fdba 	bl	8000794 <__aeabi_ddiv>
 8004c20:	2d00      	cmp	r5, #0
 8004c22:	da9d      	bge.n	8004b60 <__ieee754_pow+0xc0>
 8004c24:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004c28:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004c2c:	ea54 030b 	orrs.w	r3, r4, fp
 8004c30:	d108      	bne.n	8004c44 <__ieee754_pow+0x1a4>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4610      	mov	r0, r2
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f7fb fac9 	bl	80001d0 <__aeabi_dsub>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	e7ac      	b.n	8004b9e <__ieee754_pow+0xfe>
 8004c44:	f1bb 0f01 	cmp.w	fp, #1
 8004c48:	d18a      	bne.n	8004b60 <__ieee754_pow+0xc0>
 8004c4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c4e:	4619      	mov	r1, r3
 8004c50:	e786      	b.n	8004b60 <__ieee754_pow+0xc0>
 8004c52:	0fed      	lsrs	r5, r5, #31
 8004c54:	1e6b      	subs	r3, r5, #1
 8004c56:	930d      	str	r3, [sp, #52]	; 0x34
 8004c58:	ea5b 0303 	orrs.w	r3, fp, r3
 8004c5c:	d102      	bne.n	8004c64 <__ieee754_pow+0x1c4>
 8004c5e:	4632      	mov	r2, r6
 8004c60:	463b      	mov	r3, r7
 8004c62:	e7e8      	b.n	8004c36 <__ieee754_pow+0x196>
 8004c64:	4b16      	ldr	r3, [pc, #88]	; (8004cc0 <__ieee754_pow+0x220>)
 8004c66:	4598      	cmp	r8, r3
 8004c68:	f340 80fe 	ble.w	8004e68 <__ieee754_pow+0x3c8>
 8004c6c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004c70:	4598      	cmp	r8, r3
 8004c72:	dd0a      	ble.n	8004c8a <__ieee754_pow+0x1ea>
 8004c74:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <__ieee754_pow+0x214>)
 8004c76:	429c      	cmp	r4, r3
 8004c78:	dc0d      	bgt.n	8004c96 <__ieee754_pow+0x1f6>
 8004c7a:	f1b9 0f00 	cmp.w	r9, #0
 8004c7e:	f6bf af6d 	bge.w	8004b5c <__ieee754_pow+0xbc>
 8004c82:	a307      	add	r3, pc, #28	; (adr r3, 8004ca0 <__ieee754_pow+0x200>)
 8004c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c88:	e79f      	b.n	8004bca <__ieee754_pow+0x12a>
 8004c8a:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <__ieee754_pow+0x224>)
 8004c8c:	429c      	cmp	r4, r3
 8004c8e:	ddf4      	ble.n	8004c7a <__ieee754_pow+0x1da>
 8004c90:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <__ieee754_pow+0x218>)
 8004c92:	429c      	cmp	r4, r3
 8004c94:	dd18      	ble.n	8004cc8 <__ieee754_pow+0x228>
 8004c96:	f1b9 0f00 	cmp.w	r9, #0
 8004c9a:	dcf2      	bgt.n	8004c82 <__ieee754_pow+0x1e2>
 8004c9c:	e75e      	b.n	8004b5c <__ieee754_pow+0xbc>
 8004c9e:	bf00      	nop
 8004ca0:	8800759c 	.word	0x8800759c
 8004ca4:	7e37e43c 	.word	0x7e37e43c
 8004ca8:	7ff00000 	.word	0x7ff00000
 8004cac:	080058d3 	.word	0x080058d3
 8004cb0:	433fffff 	.word	0x433fffff
 8004cb4:	3fefffff 	.word	0x3fefffff
 8004cb8:	3ff00000 	.word	0x3ff00000
 8004cbc:	3fe00000 	.word	0x3fe00000
 8004cc0:	41e00000 	.word	0x41e00000
 8004cc4:	3feffffe 	.word	0x3feffffe
 8004cc8:	2200      	movs	r2, #0
 8004cca:	4b63      	ldr	r3, [pc, #396]	; (8004e58 <__ieee754_pow+0x3b8>)
 8004ccc:	f7fb fa80 	bl	80001d0 <__aeabi_dsub>
 8004cd0:	a355      	add	r3, pc, #340	; (adr r3, 8004e28 <__ieee754_pow+0x388>)
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	460d      	mov	r5, r1
 8004cda:	f7fb fc31 	bl	8000540 <__aeabi_dmul>
 8004cde:	a354      	add	r3, pc, #336	; (adr r3, 8004e30 <__ieee754_pow+0x390>)
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	4606      	mov	r6, r0
 8004ce6:	460f      	mov	r7, r1
 8004ce8:	4620      	mov	r0, r4
 8004cea:	4629      	mov	r1, r5
 8004cec:	f7fb fc28 	bl	8000540 <__aeabi_dmul>
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cf6:	4b59      	ldr	r3, [pc, #356]	; (8004e5c <__ieee754_pow+0x3bc>)
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	f7fb fc20 	bl	8000540 <__aeabi_dmul>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	a14c      	add	r1, pc, #304	; (adr r1, 8004e38 <__ieee754_pow+0x398>)
 8004d06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d0a:	f7fb fa61 	bl	80001d0 <__aeabi_dsub>
 8004d0e:	4622      	mov	r2, r4
 8004d10:	462b      	mov	r3, r5
 8004d12:	f7fb fc15 	bl	8000540 <__aeabi_dmul>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	4950      	ldr	r1, [pc, #320]	; (8004e60 <__ieee754_pow+0x3c0>)
 8004d1e:	f7fb fa57 	bl	80001d0 <__aeabi_dsub>
 8004d22:	4622      	mov	r2, r4
 8004d24:	462b      	mov	r3, r5
 8004d26:	4680      	mov	r8, r0
 8004d28:	4689      	mov	r9, r1
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	f7fb fc07 	bl	8000540 <__aeabi_dmul>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4640      	mov	r0, r8
 8004d38:	4649      	mov	r1, r9
 8004d3a:	f7fb fc01 	bl	8000540 <__aeabi_dmul>
 8004d3e:	a340      	add	r3, pc, #256	; (adr r3, 8004e40 <__ieee754_pow+0x3a0>)
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	f7fb fbfc 	bl	8000540 <__aeabi_dmul>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d50:	f7fb fa3e 	bl	80001d0 <__aeabi_dsub>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4604      	mov	r4, r0
 8004d5a:	460d      	mov	r5, r1
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	4639      	mov	r1, r7
 8004d60:	f7fb fa38 	bl	80001d4 <__adddf3>
 8004d64:	2000      	movs	r0, #0
 8004d66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d6a:	4632      	mov	r2, r6
 8004d6c:	463b      	mov	r3, r7
 8004d6e:	f7fb fa2f 	bl	80001d0 <__aeabi_dsub>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4620      	mov	r0, r4
 8004d78:	4629      	mov	r1, r5
 8004d7a:	f7fb fa29 	bl	80001d0 <__aeabi_dsub>
 8004d7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d80:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8004d84:	4313      	orrs	r3, r2
 8004d86:	4606      	mov	r6, r0
 8004d88:	460f      	mov	r7, r1
 8004d8a:	f040 81eb 	bne.w	8005164 <__ieee754_pow+0x6c4>
 8004d8e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8004e48 <__ieee754_pow+0x3a8>
 8004d92:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004d96:	2400      	movs	r4, #0
 8004d98:	4622      	mov	r2, r4
 8004d9a:	462b      	mov	r3, r5
 8004d9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004da0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004da4:	f7fb fa14 	bl	80001d0 <__aeabi_dsub>
 8004da8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dac:	f7fb fbc8 	bl	8000540 <__aeabi_dmul>
 8004db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004db4:	4680      	mov	r8, r0
 8004db6:	4689      	mov	r9, r1
 8004db8:	4630      	mov	r0, r6
 8004dba:	4639      	mov	r1, r7
 8004dbc:	f7fb fbc0 	bl	8000540 <__aeabi_dmul>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4640      	mov	r0, r8
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	f7fb fa04 	bl	80001d4 <__adddf3>
 8004dcc:	4622      	mov	r2, r4
 8004dce:	462b      	mov	r3, r5
 8004dd0:	4680      	mov	r8, r0
 8004dd2:	4689      	mov	r9, r1
 8004dd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dd8:	f7fb fbb2 	bl	8000540 <__aeabi_dmul>
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4604      	mov	r4, r0
 8004de0:	460d      	mov	r5, r1
 8004de2:	4602      	mov	r2, r0
 8004de4:	4649      	mov	r1, r9
 8004de6:	4640      	mov	r0, r8
 8004de8:	e9cd 4500 	strd	r4, r5, [sp]
 8004dec:	f7fb f9f2 	bl	80001d4 <__adddf3>
 8004df0:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <__ieee754_pow+0x3c4>)
 8004df2:	4299      	cmp	r1, r3
 8004df4:	4606      	mov	r6, r0
 8004df6:	460f      	mov	r7, r1
 8004df8:	468b      	mov	fp, r1
 8004dfa:	f340 82f7 	ble.w	80053ec <__ieee754_pow+0x94c>
 8004dfe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004e02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004e06:	4303      	orrs	r3, r0
 8004e08:	f000 81ea 	beq.w	80051e0 <__ieee754_pow+0x740>
 8004e0c:	a310      	add	r3, pc, #64	; (adr r3, 8004e50 <__ieee754_pow+0x3b0>)
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e16:	f7fb fb93 	bl	8000540 <__aeabi_dmul>
 8004e1a:	a30d      	add	r3, pc, #52	; (adr r3, 8004e50 <__ieee754_pow+0x3b0>)
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	e6d5      	b.n	8004bce <__ieee754_pow+0x12e>
 8004e22:	bf00      	nop
 8004e24:	f3af 8000 	nop.w
 8004e28:	60000000 	.word	0x60000000
 8004e2c:	3ff71547 	.word	0x3ff71547
 8004e30:	f85ddf44 	.word	0xf85ddf44
 8004e34:	3e54ae0b 	.word	0x3e54ae0b
 8004e38:	55555555 	.word	0x55555555
 8004e3c:	3fd55555 	.word	0x3fd55555
 8004e40:	652b82fe 	.word	0x652b82fe
 8004e44:	3ff71547 	.word	0x3ff71547
 8004e48:	00000000 	.word	0x00000000
 8004e4c:	bff00000 	.word	0xbff00000
 8004e50:	8800759c 	.word	0x8800759c
 8004e54:	7e37e43c 	.word	0x7e37e43c
 8004e58:	3ff00000 	.word	0x3ff00000
 8004e5c:	3fd00000 	.word	0x3fd00000
 8004e60:	3fe00000 	.word	0x3fe00000
 8004e64:	408fffff 	.word	0x408fffff
 8004e68:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	da05      	bge.n	8004e7e <__ieee754_pow+0x3de>
 8004e72:	4bd3      	ldr	r3, [pc, #844]	; (80051c0 <__ieee754_pow+0x720>)
 8004e74:	f7fb fb64 	bl	8000540 <__aeabi_dmul>
 8004e78:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	1523      	asrs	r3, r4, #20
 8004e80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004e84:	4413      	add	r3, r2
 8004e86:	9309      	str	r3, [sp, #36]	; 0x24
 8004e88:	4bce      	ldr	r3, [pc, #824]	; (80051c4 <__ieee754_pow+0x724>)
 8004e8a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004e8e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004e92:	429c      	cmp	r4, r3
 8004e94:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004e98:	dd08      	ble.n	8004eac <__ieee754_pow+0x40c>
 8004e9a:	4bcb      	ldr	r3, [pc, #812]	; (80051c8 <__ieee754_pow+0x728>)
 8004e9c:	429c      	cmp	r4, r3
 8004e9e:	f340 815e 	ble.w	800515e <__ieee754_pow+0x6be>
 8004ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ea8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004eac:	f04f 0a00 	mov.w	sl, #0
 8004eb0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8004eb4:	930c      	str	r3, [sp, #48]	; 0x30
 8004eb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004eb8:	4bc4      	ldr	r3, [pc, #784]	; (80051cc <__ieee754_pow+0x72c>)
 8004eba:	4413      	add	r3, r2
 8004ebc:	ed93 7b00 	vldr	d7, [r3]
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	ec53 2b17 	vmov	r2, r3, d7
 8004ec6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004eca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004ece:	f7fb f97f 	bl	80001d0 <__aeabi_dsub>
 8004ed2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ed6:	4606      	mov	r6, r0
 8004ed8:	460f      	mov	r7, r1
 8004eda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ede:	f7fb f979 	bl	80001d4 <__adddf3>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	49b9      	ldr	r1, [pc, #740]	; (80051d0 <__ieee754_pow+0x730>)
 8004eea:	f7fb fc53 	bl	8000794 <__aeabi_ddiv>
 8004eee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	4639      	mov	r1, r7
 8004efa:	f7fb fb21 	bl	8000540 <__aeabi_dmul>
 8004efe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f02:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	9302      	str	r3, [sp, #8]
 8004f0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004f12:	106d      	asrs	r5, r5, #1
 8004f14:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004f18:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004f22:	4640      	mov	r0, r8
 8004f24:	4649      	mov	r1, r9
 8004f26:	4614      	mov	r4, r2
 8004f28:	461d      	mov	r5, r3
 8004f2a:	f7fb fb09 	bl	8000540 <__aeabi_dmul>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4630      	mov	r0, r6
 8004f34:	4639      	mov	r1, r7
 8004f36:	f7fb f94b 	bl	80001d0 <__aeabi_dsub>
 8004f3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f3e:	4606      	mov	r6, r0
 8004f40:	460f      	mov	r7, r1
 8004f42:	4620      	mov	r0, r4
 8004f44:	4629      	mov	r1, r5
 8004f46:	f7fb f943 	bl	80001d0 <__aeabi_dsub>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f52:	f7fb f93d 	bl	80001d0 <__aeabi_dsub>
 8004f56:	4642      	mov	r2, r8
 8004f58:	464b      	mov	r3, r9
 8004f5a:	f7fb faf1 	bl	8000540 <__aeabi_dmul>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4630      	mov	r0, r6
 8004f64:	4639      	mov	r1, r7
 8004f66:	f7fb f933 	bl	80001d0 <__aeabi_dsub>
 8004f6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004f6e:	f7fb fae7 	bl	8000540 <__aeabi_dmul>
 8004f72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	f7fb fadf 	bl	8000540 <__aeabi_dmul>
 8004f82:	a37b      	add	r3, pc, #492	; (adr r3, 8005170 <__ieee754_pow+0x6d0>)
 8004f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f88:	4604      	mov	r4, r0
 8004f8a:	460d      	mov	r5, r1
 8004f8c:	f7fb fad8 	bl	8000540 <__aeabi_dmul>
 8004f90:	a379      	add	r3, pc, #484	; (adr r3, 8005178 <__ieee754_pow+0x6d8>)
 8004f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f96:	f7fb f91d 	bl	80001d4 <__adddf3>
 8004f9a:	4622      	mov	r2, r4
 8004f9c:	462b      	mov	r3, r5
 8004f9e:	f7fb facf 	bl	8000540 <__aeabi_dmul>
 8004fa2:	a377      	add	r3, pc, #476	; (adr r3, 8005180 <__ieee754_pow+0x6e0>)
 8004fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa8:	f7fb f914 	bl	80001d4 <__adddf3>
 8004fac:	4622      	mov	r2, r4
 8004fae:	462b      	mov	r3, r5
 8004fb0:	f7fb fac6 	bl	8000540 <__aeabi_dmul>
 8004fb4:	a374      	add	r3, pc, #464	; (adr r3, 8005188 <__ieee754_pow+0x6e8>)
 8004fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fba:	f7fb f90b 	bl	80001d4 <__adddf3>
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	462b      	mov	r3, r5
 8004fc2:	f7fb fabd 	bl	8000540 <__aeabi_dmul>
 8004fc6:	a372      	add	r3, pc, #456	; (adr r3, 8005190 <__ieee754_pow+0x6f0>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f7fb f902 	bl	80001d4 <__adddf3>
 8004fd0:	4622      	mov	r2, r4
 8004fd2:	462b      	mov	r3, r5
 8004fd4:	f7fb fab4 	bl	8000540 <__aeabi_dmul>
 8004fd8:	a36f      	add	r3, pc, #444	; (adr r3, 8005198 <__ieee754_pow+0x6f8>)
 8004fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fde:	f7fb f8f9 	bl	80001d4 <__adddf3>
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	460f      	mov	r7, r1
 8004fe8:	462b      	mov	r3, r5
 8004fea:	4620      	mov	r0, r4
 8004fec:	4629      	mov	r1, r5
 8004fee:	f7fb faa7 	bl	8000540 <__aeabi_dmul>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	4639      	mov	r1, r7
 8004ffa:	f7fb faa1 	bl	8000540 <__aeabi_dmul>
 8004ffe:	4642      	mov	r2, r8
 8005000:	4604      	mov	r4, r0
 8005002:	460d      	mov	r5, r1
 8005004:	464b      	mov	r3, r9
 8005006:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800500a:	f7fb f8e3 	bl	80001d4 <__adddf3>
 800500e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005012:	f7fb fa95 	bl	8000540 <__aeabi_dmul>
 8005016:	4622      	mov	r2, r4
 8005018:	462b      	mov	r3, r5
 800501a:	f7fb f8db 	bl	80001d4 <__adddf3>
 800501e:	4642      	mov	r2, r8
 8005020:	4606      	mov	r6, r0
 8005022:	460f      	mov	r7, r1
 8005024:	464b      	mov	r3, r9
 8005026:	4640      	mov	r0, r8
 8005028:	4649      	mov	r1, r9
 800502a:	f7fb fa89 	bl	8000540 <__aeabi_dmul>
 800502e:	2200      	movs	r2, #0
 8005030:	4b68      	ldr	r3, [pc, #416]	; (80051d4 <__ieee754_pow+0x734>)
 8005032:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005036:	f7fb f8cd 	bl	80001d4 <__adddf3>
 800503a:	4632      	mov	r2, r6
 800503c:	463b      	mov	r3, r7
 800503e:	f7fb f8c9 	bl	80001d4 <__adddf3>
 8005042:	9802      	ldr	r0, [sp, #8]
 8005044:	460d      	mov	r5, r1
 8005046:	4604      	mov	r4, r0
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4640      	mov	r0, r8
 800504e:	4649      	mov	r1, r9
 8005050:	f7fb fa76 	bl	8000540 <__aeabi_dmul>
 8005054:	2200      	movs	r2, #0
 8005056:	4680      	mov	r8, r0
 8005058:	4689      	mov	r9, r1
 800505a:	4b5e      	ldr	r3, [pc, #376]	; (80051d4 <__ieee754_pow+0x734>)
 800505c:	4620      	mov	r0, r4
 800505e:	4629      	mov	r1, r5
 8005060:	f7fb f8b6 	bl	80001d0 <__aeabi_dsub>
 8005064:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005068:	f7fb f8b2 	bl	80001d0 <__aeabi_dsub>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4630      	mov	r0, r6
 8005072:	4639      	mov	r1, r7
 8005074:	f7fb f8ac 	bl	80001d0 <__aeabi_dsub>
 8005078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800507c:	f7fb fa60 	bl	8000540 <__aeabi_dmul>
 8005080:	4622      	mov	r2, r4
 8005082:	4606      	mov	r6, r0
 8005084:	460f      	mov	r7, r1
 8005086:	462b      	mov	r3, r5
 8005088:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800508c:	f7fb fa58 	bl	8000540 <__aeabi_dmul>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4630      	mov	r0, r6
 8005096:	4639      	mov	r1, r7
 8005098:	f7fb f89c 	bl	80001d4 <__adddf3>
 800509c:	4606      	mov	r6, r0
 800509e:	460f      	mov	r7, r1
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4640      	mov	r0, r8
 80050a6:	4649      	mov	r1, r9
 80050a8:	f7fb f894 	bl	80001d4 <__adddf3>
 80050ac:	9802      	ldr	r0, [sp, #8]
 80050ae:	a33c      	add	r3, pc, #240	; (adr r3, 80051a0 <__ieee754_pow+0x700>)
 80050b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b4:	4604      	mov	r4, r0
 80050b6:	460d      	mov	r5, r1
 80050b8:	f7fb fa42 	bl	8000540 <__aeabi_dmul>
 80050bc:	4642      	mov	r2, r8
 80050be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80050c2:	464b      	mov	r3, r9
 80050c4:	4620      	mov	r0, r4
 80050c6:	4629      	mov	r1, r5
 80050c8:	f7fb f882 	bl	80001d0 <__aeabi_dsub>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4630      	mov	r0, r6
 80050d2:	4639      	mov	r1, r7
 80050d4:	f7fb f87c 	bl	80001d0 <__aeabi_dsub>
 80050d8:	a333      	add	r3, pc, #204	; (adr r3, 80051a8 <__ieee754_pow+0x708>)
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	f7fb fa2f 	bl	8000540 <__aeabi_dmul>
 80050e2:	a333      	add	r3, pc, #204	; (adr r3, 80051b0 <__ieee754_pow+0x710>)
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	4606      	mov	r6, r0
 80050ea:	460f      	mov	r7, r1
 80050ec:	4620      	mov	r0, r4
 80050ee:	4629      	mov	r1, r5
 80050f0:	f7fb fa26 	bl	8000540 <__aeabi_dmul>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4630      	mov	r0, r6
 80050fa:	4639      	mov	r1, r7
 80050fc:	f7fb f86a 	bl	80001d4 <__adddf3>
 8005100:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005102:	4b35      	ldr	r3, [pc, #212]	; (80051d8 <__ieee754_pow+0x738>)
 8005104:	4413      	add	r3, r2
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	f7fb f863 	bl	80001d4 <__adddf3>
 800510e:	4604      	mov	r4, r0
 8005110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005112:	460d      	mov	r5, r1
 8005114:	f7fb f9aa 	bl	800046c <__aeabi_i2d>
 8005118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800511a:	4b30      	ldr	r3, [pc, #192]	; (80051dc <__ieee754_pow+0x73c>)
 800511c:	4413      	add	r3, r2
 800511e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005122:	4606      	mov	r6, r0
 8005124:	460f      	mov	r7, r1
 8005126:	4622      	mov	r2, r4
 8005128:	462b      	mov	r3, r5
 800512a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800512e:	f7fb f851 	bl	80001d4 <__adddf3>
 8005132:	4642      	mov	r2, r8
 8005134:	464b      	mov	r3, r9
 8005136:	f7fb f84d 	bl	80001d4 <__adddf3>
 800513a:	4632      	mov	r2, r6
 800513c:	463b      	mov	r3, r7
 800513e:	f7fb f849 	bl	80001d4 <__adddf3>
 8005142:	9802      	ldr	r0, [sp, #8]
 8005144:	4632      	mov	r2, r6
 8005146:	463b      	mov	r3, r7
 8005148:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800514c:	f7fb f840 	bl	80001d0 <__aeabi_dsub>
 8005150:	4642      	mov	r2, r8
 8005152:	464b      	mov	r3, r9
 8005154:	f7fb f83c 	bl	80001d0 <__aeabi_dsub>
 8005158:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800515c:	e607      	b.n	8004d6e <__ieee754_pow+0x2ce>
 800515e:	f04f 0a01 	mov.w	sl, #1
 8005162:	e6a5      	b.n	8004eb0 <__ieee754_pow+0x410>
 8005164:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80051b8 <__ieee754_pow+0x718>
 8005168:	e613      	b.n	8004d92 <__ieee754_pow+0x2f2>
 800516a:	bf00      	nop
 800516c:	f3af 8000 	nop.w
 8005170:	4a454eef 	.word	0x4a454eef
 8005174:	3fca7e28 	.word	0x3fca7e28
 8005178:	93c9db65 	.word	0x93c9db65
 800517c:	3fcd864a 	.word	0x3fcd864a
 8005180:	a91d4101 	.word	0xa91d4101
 8005184:	3fd17460 	.word	0x3fd17460
 8005188:	518f264d 	.word	0x518f264d
 800518c:	3fd55555 	.word	0x3fd55555
 8005190:	db6fabff 	.word	0xdb6fabff
 8005194:	3fdb6db6 	.word	0x3fdb6db6
 8005198:	33333303 	.word	0x33333303
 800519c:	3fe33333 	.word	0x3fe33333
 80051a0:	e0000000 	.word	0xe0000000
 80051a4:	3feec709 	.word	0x3feec709
 80051a8:	dc3a03fd 	.word	0xdc3a03fd
 80051ac:	3feec709 	.word	0x3feec709
 80051b0:	145b01f5 	.word	0x145b01f5
 80051b4:	be3e2fe0 	.word	0xbe3e2fe0
 80051b8:	00000000 	.word	0x00000000
 80051bc:	3ff00000 	.word	0x3ff00000
 80051c0:	43400000 	.word	0x43400000
 80051c4:	0003988e 	.word	0x0003988e
 80051c8:	000bb679 	.word	0x000bb679
 80051cc:	080058d8 	.word	0x080058d8
 80051d0:	3ff00000 	.word	0x3ff00000
 80051d4:	40080000 	.word	0x40080000
 80051d8:	080058f8 	.word	0x080058f8
 80051dc:	080058e8 	.word	0x080058e8
 80051e0:	a3b4      	add	r3, pc, #720	; (adr r3, 80054b4 <__ieee754_pow+0xa14>)
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	4640      	mov	r0, r8
 80051e8:	4649      	mov	r1, r9
 80051ea:	f7fa fff3 	bl	80001d4 <__adddf3>
 80051ee:	4622      	mov	r2, r4
 80051f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051f4:	462b      	mov	r3, r5
 80051f6:	4630      	mov	r0, r6
 80051f8:	4639      	mov	r1, r7
 80051fa:	f7fa ffe9 	bl	80001d0 <__aeabi_dsub>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005206:	f7fb fc2b 	bl	8000a60 <__aeabi_dcmpgt>
 800520a:	2800      	cmp	r0, #0
 800520c:	f47f adfe 	bne.w	8004e0c <__ieee754_pow+0x36c>
 8005210:	4aa3      	ldr	r2, [pc, #652]	; (80054a0 <__ieee754_pow+0xa00>)
 8005212:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005216:	4293      	cmp	r3, r2
 8005218:	f340 810a 	ble.w	8005430 <__ieee754_pow+0x990>
 800521c:	151b      	asrs	r3, r3, #20
 800521e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005222:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005226:	fa4a f303 	asr.w	r3, sl, r3
 800522a:	445b      	add	r3, fp
 800522c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005230:	4e9c      	ldr	r6, [pc, #624]	; (80054a4 <__ieee754_pow+0xa04>)
 8005232:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005236:	4116      	asrs	r6, r2
 8005238:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800523c:	2000      	movs	r0, #0
 800523e:	ea23 0106 	bic.w	r1, r3, r6
 8005242:	f1c2 0214 	rsb	r2, r2, #20
 8005246:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800524a:	fa4a fa02 	asr.w	sl, sl, r2
 800524e:	f1bb 0f00 	cmp.w	fp, #0
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4620      	mov	r0, r4
 8005258:	4629      	mov	r1, r5
 800525a:	bfb8      	it	lt
 800525c:	f1ca 0a00 	rsblt	sl, sl, #0
 8005260:	f7fa ffb6 	bl	80001d0 <__aeabi_dsub>
 8005264:	e9cd 0100 	strd	r0, r1, [sp]
 8005268:	4642      	mov	r2, r8
 800526a:	464b      	mov	r3, r9
 800526c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005270:	f7fa ffb0 	bl	80001d4 <__adddf3>
 8005274:	2000      	movs	r0, #0
 8005276:	a378      	add	r3, pc, #480	; (adr r3, 8005458 <__ieee754_pow+0x9b8>)
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	4604      	mov	r4, r0
 800527e:	460d      	mov	r5, r1
 8005280:	f7fb f95e 	bl	8000540 <__aeabi_dmul>
 8005284:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005288:	4606      	mov	r6, r0
 800528a:	460f      	mov	r7, r1
 800528c:	4620      	mov	r0, r4
 800528e:	4629      	mov	r1, r5
 8005290:	f7fa ff9e 	bl	80001d0 <__aeabi_dsub>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4640      	mov	r0, r8
 800529a:	4649      	mov	r1, r9
 800529c:	f7fa ff98 	bl	80001d0 <__aeabi_dsub>
 80052a0:	a36f      	add	r3, pc, #444	; (adr r3, 8005460 <__ieee754_pow+0x9c0>)
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a6:	f7fb f94b 	bl	8000540 <__aeabi_dmul>
 80052aa:	a36f      	add	r3, pc, #444	; (adr r3, 8005468 <__ieee754_pow+0x9c8>)
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	4680      	mov	r8, r0
 80052b2:	4689      	mov	r9, r1
 80052b4:	4620      	mov	r0, r4
 80052b6:	4629      	mov	r1, r5
 80052b8:	f7fb f942 	bl	8000540 <__aeabi_dmul>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4640      	mov	r0, r8
 80052c2:	4649      	mov	r1, r9
 80052c4:	f7fa ff86 	bl	80001d4 <__adddf3>
 80052c8:	4604      	mov	r4, r0
 80052ca:	460d      	mov	r5, r1
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4630      	mov	r0, r6
 80052d2:	4639      	mov	r1, r7
 80052d4:	f7fa ff7e 	bl	80001d4 <__adddf3>
 80052d8:	4632      	mov	r2, r6
 80052da:	463b      	mov	r3, r7
 80052dc:	4680      	mov	r8, r0
 80052de:	4689      	mov	r9, r1
 80052e0:	f7fa ff76 	bl	80001d0 <__aeabi_dsub>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4620      	mov	r0, r4
 80052ea:	4629      	mov	r1, r5
 80052ec:	f7fa ff70 	bl	80001d0 <__aeabi_dsub>
 80052f0:	4642      	mov	r2, r8
 80052f2:	4606      	mov	r6, r0
 80052f4:	460f      	mov	r7, r1
 80052f6:	464b      	mov	r3, r9
 80052f8:	4640      	mov	r0, r8
 80052fa:	4649      	mov	r1, r9
 80052fc:	f7fb f920 	bl	8000540 <__aeabi_dmul>
 8005300:	a35b      	add	r3, pc, #364	; (adr r3, 8005470 <__ieee754_pow+0x9d0>)
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	4604      	mov	r4, r0
 8005308:	460d      	mov	r5, r1
 800530a:	f7fb f919 	bl	8000540 <__aeabi_dmul>
 800530e:	a35a      	add	r3, pc, #360	; (adr r3, 8005478 <__ieee754_pow+0x9d8>)
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	f7fa ff5c 	bl	80001d0 <__aeabi_dsub>
 8005318:	4622      	mov	r2, r4
 800531a:	462b      	mov	r3, r5
 800531c:	f7fb f910 	bl	8000540 <__aeabi_dmul>
 8005320:	a357      	add	r3, pc, #348	; (adr r3, 8005480 <__ieee754_pow+0x9e0>)
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	f7fa ff55 	bl	80001d4 <__adddf3>
 800532a:	4622      	mov	r2, r4
 800532c:	462b      	mov	r3, r5
 800532e:	f7fb f907 	bl	8000540 <__aeabi_dmul>
 8005332:	a355      	add	r3, pc, #340	; (adr r3, 8005488 <__ieee754_pow+0x9e8>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	f7fa ff4a 	bl	80001d0 <__aeabi_dsub>
 800533c:	4622      	mov	r2, r4
 800533e:	462b      	mov	r3, r5
 8005340:	f7fb f8fe 	bl	8000540 <__aeabi_dmul>
 8005344:	a352      	add	r3, pc, #328	; (adr r3, 8005490 <__ieee754_pow+0x9f0>)
 8005346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534a:	f7fa ff43 	bl	80001d4 <__adddf3>
 800534e:	4622      	mov	r2, r4
 8005350:	462b      	mov	r3, r5
 8005352:	f7fb f8f5 	bl	8000540 <__aeabi_dmul>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4640      	mov	r0, r8
 800535c:	4649      	mov	r1, r9
 800535e:	f7fa ff37 	bl	80001d0 <__aeabi_dsub>
 8005362:	4604      	mov	r4, r0
 8005364:	460d      	mov	r5, r1
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4640      	mov	r0, r8
 800536c:	4649      	mov	r1, r9
 800536e:	f7fb f8e7 	bl	8000540 <__aeabi_dmul>
 8005372:	2200      	movs	r2, #0
 8005374:	e9cd 0100 	strd	r0, r1, [sp]
 8005378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800537c:	4620      	mov	r0, r4
 800537e:	4629      	mov	r1, r5
 8005380:	f7fa ff26 	bl	80001d0 <__aeabi_dsub>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	e9dd 0100 	ldrd	r0, r1, [sp]
 800538c:	f7fb fa02 	bl	8000794 <__aeabi_ddiv>
 8005390:	4632      	mov	r2, r6
 8005392:	4604      	mov	r4, r0
 8005394:	460d      	mov	r5, r1
 8005396:	463b      	mov	r3, r7
 8005398:	4640      	mov	r0, r8
 800539a:	4649      	mov	r1, r9
 800539c:	f7fb f8d0 	bl	8000540 <__aeabi_dmul>
 80053a0:	4632      	mov	r2, r6
 80053a2:	463b      	mov	r3, r7
 80053a4:	f7fa ff16 	bl	80001d4 <__adddf3>
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	4620      	mov	r0, r4
 80053ae:	4629      	mov	r1, r5
 80053b0:	f7fa ff0e 	bl	80001d0 <__aeabi_dsub>
 80053b4:	4642      	mov	r2, r8
 80053b6:	464b      	mov	r3, r9
 80053b8:	f7fa ff0a 	bl	80001d0 <__aeabi_dsub>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	2000      	movs	r0, #0
 80053c2:	4939      	ldr	r1, [pc, #228]	; (80054a8 <__ieee754_pow+0xa08>)
 80053c4:	f7fa ff04 	bl	80001d0 <__aeabi_dsub>
 80053c8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80053cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	da2f      	bge.n	8005436 <__ieee754_pow+0x996>
 80053d6:	4650      	mov	r0, sl
 80053d8:	ec43 2b10 	vmov	d0, r2, r3
 80053dc:	f000 f9c0 	bl	8005760 <scalbn>
 80053e0:	ec51 0b10 	vmov	r0, r1, d0
 80053e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053e8:	f7ff bbf1 	b.w	8004bce <__ieee754_pow+0x12e>
 80053ec:	4b2f      	ldr	r3, [pc, #188]	; (80054ac <__ieee754_pow+0xa0c>)
 80053ee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80053f2:	429e      	cmp	r6, r3
 80053f4:	f77f af0c 	ble.w	8005210 <__ieee754_pow+0x770>
 80053f8:	4b2d      	ldr	r3, [pc, #180]	; (80054b0 <__ieee754_pow+0xa10>)
 80053fa:	440b      	add	r3, r1
 80053fc:	4303      	orrs	r3, r0
 80053fe:	d00b      	beq.n	8005418 <__ieee754_pow+0x978>
 8005400:	a325      	add	r3, pc, #148	; (adr r3, 8005498 <__ieee754_pow+0x9f8>)
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800540a:	f7fb f899 	bl	8000540 <__aeabi_dmul>
 800540e:	a322      	add	r3, pc, #136	; (adr r3, 8005498 <__ieee754_pow+0x9f8>)
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f7ff bbdb 	b.w	8004bce <__ieee754_pow+0x12e>
 8005418:	4622      	mov	r2, r4
 800541a:	462b      	mov	r3, r5
 800541c:	f7fa fed8 	bl	80001d0 <__aeabi_dsub>
 8005420:	4642      	mov	r2, r8
 8005422:	464b      	mov	r3, r9
 8005424:	f7fb fb12 	bl	8000a4c <__aeabi_dcmpge>
 8005428:	2800      	cmp	r0, #0
 800542a:	f43f aef1 	beq.w	8005210 <__ieee754_pow+0x770>
 800542e:	e7e7      	b.n	8005400 <__ieee754_pow+0x960>
 8005430:	f04f 0a00 	mov.w	sl, #0
 8005434:	e718      	b.n	8005268 <__ieee754_pow+0x7c8>
 8005436:	4621      	mov	r1, r4
 8005438:	e7d4      	b.n	80053e4 <__ieee754_pow+0x944>
 800543a:	2000      	movs	r0, #0
 800543c:	491a      	ldr	r1, [pc, #104]	; (80054a8 <__ieee754_pow+0xa08>)
 800543e:	f7ff bb8f 	b.w	8004b60 <__ieee754_pow+0xc0>
 8005442:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005446:	f7ff bb8b 	b.w	8004b60 <__ieee754_pow+0xc0>
 800544a:	4630      	mov	r0, r6
 800544c:	4639      	mov	r1, r7
 800544e:	f7ff bb87 	b.w	8004b60 <__ieee754_pow+0xc0>
 8005452:	4693      	mov	fp, r2
 8005454:	f7ff bb98 	b.w	8004b88 <__ieee754_pow+0xe8>
 8005458:	00000000 	.word	0x00000000
 800545c:	3fe62e43 	.word	0x3fe62e43
 8005460:	fefa39ef 	.word	0xfefa39ef
 8005464:	3fe62e42 	.word	0x3fe62e42
 8005468:	0ca86c39 	.word	0x0ca86c39
 800546c:	be205c61 	.word	0xbe205c61
 8005470:	72bea4d0 	.word	0x72bea4d0
 8005474:	3e663769 	.word	0x3e663769
 8005478:	c5d26bf1 	.word	0xc5d26bf1
 800547c:	3ebbbd41 	.word	0x3ebbbd41
 8005480:	af25de2c 	.word	0xaf25de2c
 8005484:	3f11566a 	.word	0x3f11566a
 8005488:	16bebd93 	.word	0x16bebd93
 800548c:	3f66c16c 	.word	0x3f66c16c
 8005490:	5555553e 	.word	0x5555553e
 8005494:	3fc55555 	.word	0x3fc55555
 8005498:	c2f8f359 	.word	0xc2f8f359
 800549c:	01a56e1f 	.word	0x01a56e1f
 80054a0:	3fe00000 	.word	0x3fe00000
 80054a4:	000fffff 	.word	0x000fffff
 80054a8:	3ff00000 	.word	0x3ff00000
 80054ac:	4090cbff 	.word	0x4090cbff
 80054b0:	3f6f3400 	.word	0x3f6f3400
 80054b4:	652b82fe 	.word	0x652b82fe
 80054b8:	3c971547 	.word	0x3c971547

080054bc <__ieee754_sqrt>:
 80054bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c0:	4955      	ldr	r1, [pc, #340]	; (8005618 <__ieee754_sqrt+0x15c>)
 80054c2:	ec55 4b10 	vmov	r4, r5, d0
 80054c6:	43a9      	bics	r1, r5
 80054c8:	462b      	mov	r3, r5
 80054ca:	462a      	mov	r2, r5
 80054cc:	d112      	bne.n	80054f4 <__ieee754_sqrt+0x38>
 80054ce:	ee10 2a10 	vmov	r2, s0
 80054d2:	ee10 0a10 	vmov	r0, s0
 80054d6:	4629      	mov	r1, r5
 80054d8:	f7fb f832 	bl	8000540 <__aeabi_dmul>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4620      	mov	r0, r4
 80054e2:	4629      	mov	r1, r5
 80054e4:	f7fa fe76 	bl	80001d4 <__adddf3>
 80054e8:	4604      	mov	r4, r0
 80054ea:	460d      	mov	r5, r1
 80054ec:	ec45 4b10 	vmov	d0, r4, r5
 80054f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054f4:	2d00      	cmp	r5, #0
 80054f6:	ee10 0a10 	vmov	r0, s0
 80054fa:	4621      	mov	r1, r4
 80054fc:	dc0f      	bgt.n	800551e <__ieee754_sqrt+0x62>
 80054fe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005502:	4330      	orrs	r0, r6
 8005504:	d0f2      	beq.n	80054ec <__ieee754_sqrt+0x30>
 8005506:	b155      	cbz	r5, 800551e <__ieee754_sqrt+0x62>
 8005508:	ee10 2a10 	vmov	r2, s0
 800550c:	4620      	mov	r0, r4
 800550e:	4629      	mov	r1, r5
 8005510:	f7fa fe5e 	bl	80001d0 <__aeabi_dsub>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	f7fb f93c 	bl	8000794 <__aeabi_ddiv>
 800551c:	e7e4      	b.n	80054e8 <__ieee754_sqrt+0x2c>
 800551e:	151b      	asrs	r3, r3, #20
 8005520:	d073      	beq.n	800560a <__ieee754_sqrt+0x14e>
 8005522:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005526:	07dd      	lsls	r5, r3, #31
 8005528:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800552c:	bf48      	it	mi
 800552e:	0fc8      	lsrmi	r0, r1, #31
 8005530:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005534:	bf44      	itt	mi
 8005536:	0049      	lslmi	r1, r1, #1
 8005538:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800553c:	2500      	movs	r5, #0
 800553e:	1058      	asrs	r0, r3, #1
 8005540:	0fcb      	lsrs	r3, r1, #31
 8005542:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005546:	0049      	lsls	r1, r1, #1
 8005548:	2316      	movs	r3, #22
 800554a:	462c      	mov	r4, r5
 800554c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005550:	19a7      	adds	r7, r4, r6
 8005552:	4297      	cmp	r7, r2
 8005554:	bfde      	ittt	le
 8005556:	19bc      	addle	r4, r7, r6
 8005558:	1bd2      	suble	r2, r2, r7
 800555a:	19ad      	addle	r5, r5, r6
 800555c:	0fcf      	lsrs	r7, r1, #31
 800555e:	3b01      	subs	r3, #1
 8005560:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005564:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005568:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800556c:	d1f0      	bne.n	8005550 <__ieee754_sqrt+0x94>
 800556e:	f04f 0c20 	mov.w	ip, #32
 8005572:	469e      	mov	lr, r3
 8005574:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005578:	42a2      	cmp	r2, r4
 800557a:	eb06 070e 	add.w	r7, r6, lr
 800557e:	dc02      	bgt.n	8005586 <__ieee754_sqrt+0xca>
 8005580:	d112      	bne.n	80055a8 <__ieee754_sqrt+0xec>
 8005582:	428f      	cmp	r7, r1
 8005584:	d810      	bhi.n	80055a8 <__ieee754_sqrt+0xec>
 8005586:	2f00      	cmp	r7, #0
 8005588:	eb07 0e06 	add.w	lr, r7, r6
 800558c:	da42      	bge.n	8005614 <__ieee754_sqrt+0x158>
 800558e:	f1be 0f00 	cmp.w	lr, #0
 8005592:	db3f      	blt.n	8005614 <__ieee754_sqrt+0x158>
 8005594:	f104 0801 	add.w	r8, r4, #1
 8005598:	1b12      	subs	r2, r2, r4
 800559a:	428f      	cmp	r7, r1
 800559c:	bf88      	it	hi
 800559e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80055a2:	1bc9      	subs	r1, r1, r7
 80055a4:	4433      	add	r3, r6
 80055a6:	4644      	mov	r4, r8
 80055a8:	0052      	lsls	r2, r2, #1
 80055aa:	f1bc 0c01 	subs.w	ip, ip, #1
 80055ae:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80055b2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80055b6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80055ba:	d1dd      	bne.n	8005578 <__ieee754_sqrt+0xbc>
 80055bc:	430a      	orrs	r2, r1
 80055be:	d006      	beq.n	80055ce <__ieee754_sqrt+0x112>
 80055c0:	1c5c      	adds	r4, r3, #1
 80055c2:	bf13      	iteet	ne
 80055c4:	3301      	addne	r3, #1
 80055c6:	3501      	addeq	r5, #1
 80055c8:	4663      	moveq	r3, ip
 80055ca:	f023 0301 	bicne.w	r3, r3, #1
 80055ce:	106a      	asrs	r2, r5, #1
 80055d0:	085b      	lsrs	r3, r3, #1
 80055d2:	07e9      	lsls	r1, r5, #31
 80055d4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80055d8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80055dc:	bf48      	it	mi
 80055de:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80055e2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80055e6:	461c      	mov	r4, r3
 80055e8:	e780      	b.n	80054ec <__ieee754_sqrt+0x30>
 80055ea:	0aca      	lsrs	r2, r1, #11
 80055ec:	3815      	subs	r0, #21
 80055ee:	0549      	lsls	r1, r1, #21
 80055f0:	2a00      	cmp	r2, #0
 80055f2:	d0fa      	beq.n	80055ea <__ieee754_sqrt+0x12e>
 80055f4:	02d6      	lsls	r6, r2, #11
 80055f6:	d50a      	bpl.n	800560e <__ieee754_sqrt+0x152>
 80055f8:	f1c3 0420 	rsb	r4, r3, #32
 80055fc:	fa21 f404 	lsr.w	r4, r1, r4
 8005600:	1e5d      	subs	r5, r3, #1
 8005602:	4099      	lsls	r1, r3
 8005604:	4322      	orrs	r2, r4
 8005606:	1b43      	subs	r3, r0, r5
 8005608:	e78b      	b.n	8005522 <__ieee754_sqrt+0x66>
 800560a:	4618      	mov	r0, r3
 800560c:	e7f0      	b.n	80055f0 <__ieee754_sqrt+0x134>
 800560e:	0052      	lsls	r2, r2, #1
 8005610:	3301      	adds	r3, #1
 8005612:	e7ef      	b.n	80055f4 <__ieee754_sqrt+0x138>
 8005614:	46a0      	mov	r8, r4
 8005616:	e7bf      	b.n	8005598 <__ieee754_sqrt+0xdc>
 8005618:	7ff00000 	.word	0x7ff00000

0800561c <fabs>:
 800561c:	ec51 0b10 	vmov	r0, r1, d0
 8005620:	ee10 2a10 	vmov	r2, s0
 8005624:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005628:	ec43 2b10 	vmov	d0, r2, r3
 800562c:	4770      	bx	lr

0800562e <finite>:
 800562e:	ee10 3a90 	vmov	r3, s1
 8005632:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8005636:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800563a:	0fc0      	lsrs	r0, r0, #31
 800563c:	4770      	bx	lr

0800563e <matherr>:
 800563e:	2000      	movs	r0, #0
 8005640:	4770      	bx	lr
 8005642:	0000      	movs	r0, r0
 8005644:	0000      	movs	r0, r0
	...

08005648 <nan>:
 8005648:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005650 <nan+0x8>
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	00000000 	.word	0x00000000
 8005654:	7ff80000 	.word	0x7ff80000

08005658 <rint>:
 8005658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800565a:	ec51 0b10 	vmov	r0, r1, d0
 800565e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005662:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005666:	2e13      	cmp	r6, #19
 8005668:	460b      	mov	r3, r1
 800566a:	ee10 4a10 	vmov	r4, s0
 800566e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8005672:	dc56      	bgt.n	8005722 <rint+0xca>
 8005674:	2e00      	cmp	r6, #0
 8005676:	da2b      	bge.n	80056d0 <rint+0x78>
 8005678:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800567c:	4302      	orrs	r2, r0
 800567e:	d023      	beq.n	80056c8 <rint+0x70>
 8005680:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005684:	4302      	orrs	r2, r0
 8005686:	4254      	negs	r4, r2
 8005688:	4314      	orrs	r4, r2
 800568a:	0c4b      	lsrs	r3, r1, #17
 800568c:	0b24      	lsrs	r4, r4, #12
 800568e:	045b      	lsls	r3, r3, #17
 8005690:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8005694:	ea44 0103 	orr.w	r1, r4, r3
 8005698:	460b      	mov	r3, r1
 800569a:	492f      	ldr	r1, [pc, #188]	; (8005758 <rint+0x100>)
 800569c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80056a0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80056a4:	4602      	mov	r2, r0
 80056a6:	4639      	mov	r1, r7
 80056a8:	4630      	mov	r0, r6
 80056aa:	f7fa fd93 	bl	80001d4 <__adddf3>
 80056ae:	e9cd 0100 	strd	r0, r1, [sp]
 80056b2:	463b      	mov	r3, r7
 80056b4:	4632      	mov	r2, r6
 80056b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056ba:	f7fa fd89 	bl	80001d0 <__aeabi_dsub>
 80056be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80056c2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80056c6:	4639      	mov	r1, r7
 80056c8:	ec41 0b10 	vmov	d0, r0, r1
 80056cc:	b003      	add	sp, #12
 80056ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056d0:	4a22      	ldr	r2, [pc, #136]	; (800575c <rint+0x104>)
 80056d2:	4132      	asrs	r2, r6
 80056d4:	ea01 0702 	and.w	r7, r1, r2
 80056d8:	4307      	orrs	r7, r0
 80056da:	d0f5      	beq.n	80056c8 <rint+0x70>
 80056dc:	0852      	lsrs	r2, r2, #1
 80056de:	4011      	ands	r1, r2
 80056e0:	430c      	orrs	r4, r1
 80056e2:	d00b      	beq.n	80056fc <rint+0xa4>
 80056e4:	ea23 0202 	bic.w	r2, r3, r2
 80056e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80056ec:	2e13      	cmp	r6, #19
 80056ee:	fa43 f306 	asr.w	r3, r3, r6
 80056f2:	bf0c      	ite	eq
 80056f4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80056f8:	2400      	movne	r4, #0
 80056fa:	4313      	orrs	r3, r2
 80056fc:	4916      	ldr	r1, [pc, #88]	; (8005758 <rint+0x100>)
 80056fe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005702:	4622      	mov	r2, r4
 8005704:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005708:	4620      	mov	r0, r4
 800570a:	4629      	mov	r1, r5
 800570c:	f7fa fd62 	bl	80001d4 <__adddf3>
 8005710:	e9cd 0100 	strd	r0, r1, [sp]
 8005714:	4622      	mov	r2, r4
 8005716:	462b      	mov	r3, r5
 8005718:	e9dd 0100 	ldrd	r0, r1, [sp]
 800571c:	f7fa fd58 	bl	80001d0 <__aeabi_dsub>
 8005720:	e7d2      	b.n	80056c8 <rint+0x70>
 8005722:	2e33      	cmp	r6, #51	; 0x33
 8005724:	dd07      	ble.n	8005736 <rint+0xde>
 8005726:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800572a:	d1cd      	bne.n	80056c8 <rint+0x70>
 800572c:	ee10 2a10 	vmov	r2, s0
 8005730:	f7fa fd50 	bl	80001d4 <__adddf3>
 8005734:	e7c8      	b.n	80056c8 <rint+0x70>
 8005736:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800573a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800573e:	40f2      	lsrs	r2, r6
 8005740:	4210      	tst	r0, r2
 8005742:	d0c1      	beq.n	80056c8 <rint+0x70>
 8005744:	0852      	lsrs	r2, r2, #1
 8005746:	4210      	tst	r0, r2
 8005748:	bf1f      	itttt	ne
 800574a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800574e:	ea20 0202 	bicne.w	r2, r0, r2
 8005752:	4134      	asrne	r4, r6
 8005754:	4314      	orrne	r4, r2
 8005756:	e7d1      	b.n	80056fc <rint+0xa4>
 8005758:	08005908 	.word	0x08005908
 800575c:	000fffff 	.word	0x000fffff

08005760 <scalbn>:
 8005760:	b570      	push	{r4, r5, r6, lr}
 8005762:	ec55 4b10 	vmov	r4, r5, d0
 8005766:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800576a:	4606      	mov	r6, r0
 800576c:	462b      	mov	r3, r5
 800576e:	b9aa      	cbnz	r2, 800579c <scalbn+0x3c>
 8005770:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005774:	4323      	orrs	r3, r4
 8005776:	d03b      	beq.n	80057f0 <scalbn+0x90>
 8005778:	4b31      	ldr	r3, [pc, #196]	; (8005840 <scalbn+0xe0>)
 800577a:	4629      	mov	r1, r5
 800577c:	2200      	movs	r2, #0
 800577e:	ee10 0a10 	vmov	r0, s0
 8005782:	f7fa fedd 	bl	8000540 <__aeabi_dmul>
 8005786:	4b2f      	ldr	r3, [pc, #188]	; (8005844 <scalbn+0xe4>)
 8005788:	429e      	cmp	r6, r3
 800578a:	4604      	mov	r4, r0
 800578c:	460d      	mov	r5, r1
 800578e:	da12      	bge.n	80057b6 <scalbn+0x56>
 8005790:	a327      	add	r3, pc, #156	; (adr r3, 8005830 <scalbn+0xd0>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fa fed3 	bl	8000540 <__aeabi_dmul>
 800579a:	e009      	b.n	80057b0 <scalbn+0x50>
 800579c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80057a0:	428a      	cmp	r2, r1
 80057a2:	d10c      	bne.n	80057be <scalbn+0x5e>
 80057a4:	ee10 2a10 	vmov	r2, s0
 80057a8:	4620      	mov	r0, r4
 80057aa:	4629      	mov	r1, r5
 80057ac:	f7fa fd12 	bl	80001d4 <__adddf3>
 80057b0:	4604      	mov	r4, r0
 80057b2:	460d      	mov	r5, r1
 80057b4:	e01c      	b.n	80057f0 <scalbn+0x90>
 80057b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80057ba:	460b      	mov	r3, r1
 80057bc:	3a36      	subs	r2, #54	; 0x36
 80057be:	4432      	add	r2, r6
 80057c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80057c4:	428a      	cmp	r2, r1
 80057c6:	dd0b      	ble.n	80057e0 <scalbn+0x80>
 80057c8:	ec45 4b11 	vmov	d1, r4, r5
 80057cc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005838 <scalbn+0xd8>
 80057d0:	f000 f83c 	bl	800584c <copysign>
 80057d4:	a318      	add	r3, pc, #96	; (adr r3, 8005838 <scalbn+0xd8>)
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	ec51 0b10 	vmov	r0, r1, d0
 80057de:	e7da      	b.n	8005796 <scalbn+0x36>
 80057e0:	2a00      	cmp	r2, #0
 80057e2:	dd08      	ble.n	80057f6 <scalbn+0x96>
 80057e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80057e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80057ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80057f0:	ec45 4b10 	vmov	d0, r4, r5
 80057f4:	bd70      	pop	{r4, r5, r6, pc}
 80057f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80057fa:	da0d      	bge.n	8005818 <scalbn+0xb8>
 80057fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005800:	429e      	cmp	r6, r3
 8005802:	ec45 4b11 	vmov	d1, r4, r5
 8005806:	dce1      	bgt.n	80057cc <scalbn+0x6c>
 8005808:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005830 <scalbn+0xd0>
 800580c:	f000 f81e 	bl	800584c <copysign>
 8005810:	a307      	add	r3, pc, #28	; (adr r3, 8005830 <scalbn+0xd0>)
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	e7e0      	b.n	80057da <scalbn+0x7a>
 8005818:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800581c:	3236      	adds	r2, #54	; 0x36
 800581e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005822:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005826:	4620      	mov	r0, r4
 8005828:	4629      	mov	r1, r5
 800582a:	2200      	movs	r2, #0
 800582c:	4b06      	ldr	r3, [pc, #24]	; (8005848 <scalbn+0xe8>)
 800582e:	e7b2      	b.n	8005796 <scalbn+0x36>
 8005830:	c2f8f359 	.word	0xc2f8f359
 8005834:	01a56e1f 	.word	0x01a56e1f
 8005838:	8800759c 	.word	0x8800759c
 800583c:	7e37e43c 	.word	0x7e37e43c
 8005840:	43500000 	.word	0x43500000
 8005844:	ffff3cb0 	.word	0xffff3cb0
 8005848:	3c900000 	.word	0x3c900000

0800584c <copysign>:
 800584c:	ec51 0b10 	vmov	r0, r1, d0
 8005850:	ee11 0a90 	vmov	r0, s3
 8005854:	ee10 2a10 	vmov	r2, s0
 8005858:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800585c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005860:	ea41 0300 	orr.w	r3, r1, r0
 8005864:	ec43 2b10 	vmov	d0, r2, r3
 8005868:	4770      	bx	lr
	...

0800586c <_init>:
 800586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586e:	bf00      	nop
 8005870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005872:	bc08      	pop	{r3}
 8005874:	469e      	mov	lr, r3
 8005876:	4770      	bx	lr

08005878 <_fini>:
 8005878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587a:	bf00      	nop
 800587c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587e:	bc08      	pop	{r3}
 8005880:	469e      	mov	lr, r3
 8005882:	4770      	bx	lr
